{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/int-range/index.js","webpack:///external {\"commonjs\":\"react\",\"commonjs2\":\"react\"}","webpack:///./node_modules/int-range/lib/IntRange.js","webpack:///external {\"commonjs\":\"prop-types\",\"commonjs2\":\"prop-types\"}","webpack:///external {\"commonjs\":\"easy-event\",\"commonjs2\":\"easy-event\"}","webpack:///./node_modules/int-range/lib/rangeSub.js","webpack:///./node_modules/int-range/lib/rangeIntersect.js","webpack:///./node_modules/int-range/lib/range.js","webpack:///./node_modules/int-range/lib/rangeAdd.js","webpack:///./node_modules/int-range/lib/rangeCut.js","webpack:///./src/event/TextFieldEvent.js","webpack:///./src/util/randomString.js","webpack:///./src/model/InlineStyleRange.js","webpack:///./src/model/BlockType.js","webpack:///./src/component/TextBlock.js","webpack:///./src/component/TextContent.js","webpack:///./src/util/TimerUtil.js","webpack:///./src/util/SelectionUtil.js","webpack:///./src/component/TextField.js","webpack:///./src/util/NavigatorUtil.js","webpack:///./src/model/Block.js","webpack:///./src/model/Content.js","webpack:///./src/model/SelectionRange.js","webpack:///./src/model/TextFieldState.js","webpack:///./src/util/StyleUtil.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Range","range","rangeAdd","rangeCut","rangeIntersect","rangeSub","require","$begin","$length","poolSize","objPool","[object Object]","begin","length","this","arr","push","toArray","Number","isNaN","Infinity","Math","round","max","min","_max","pop","args","rawList","shift","toRaw","sort","a","b","arg","raw","Array","indexOf","idx","rightArr","slice","splice","r1Min","r1Max","r2Min","r2Max","idx2","delLen","filter","result","item","r1","clone","r2","undefined","curRange","removeIdxs","isIntersect","obsolete","release","rangeCut2","range1","range2","result1","result2","result3","laveList","jiaoArr","subRange","chaArr","tempResult","isFind","j","jiaoRange","TextFieldEvent","Event","cache","randomString","expect","str","random","toString","substring","InlineStyleRange","_this","style","arguments","InlineStyleRange_classCallCheck","InlineStyleRange_getPrototypeOf","_key","set","InlineStyleRange_assertThisInitialized","writable","_classPrivateFieldSet","obj","sr","_get","keys1","keys","keys2","_objectSpread","_classPrivateFieldGet","BlockType","TextBlock","Component","block","type","QUOTE","external_commonjs_react_commonjs2_react_default","createElement","data-key","id","renderContent","list","offset","text","inlineStyles","parseInlineStyleRanges","is","substr","apply","_toConsumableArray","inlineStyleRanges","forEach","TextBlock_objectSpread","props","renderBlock","PropTypes","isRequired","TextContent","content","className","renderBlockList","getBlockList","v","TextBlock_TextBlock","TimerUtil","handler","thisObj","time","_len","setTimeout","concat","tryCount","SelectionUtil","tfState","selRange","sel","window","getSelection","rangeCount","getRangeAt","err","selection","blockCount","reset","console","log","getKey","findNode","depthFind","container","nodeName","childNodes","find","tfDom","document","getElementById","contentDom","blockNode","dataset","getGlobalOffset","blockRange","getBlockRange","count","innerText","startKey","startContainer","startOffset","endKey","endContainer","endOffset","update","save","globalOffset","len","node","getPosition","gloablOffset","contentDOM","child","position1","position2","createRange","setStart","setEnd","removeAllRanges","addRange","blockList","firstBlock","lastBlock","getText","delRange","codePointAt","TextField","TextField_classCallCheck","TextField_getPrototypeOf","_isCompositionStart","TextField_assertThisInitialized","_mouseDown","state","renderData","addEventListener","RENDER","onRenderHandler","onMouseUpHandler","removeEventListener","prevProps","prevState","snapshot","needCursor","event","TextField_objectSpread","data","setState","_this2","_this$props$tfState","editable","suppressContentEditableWarning","contentEditable","onMouseDown","e","onMouseDownHandler","onFocus","onBlur","onKeyDown","onKeyDownHandler","onKeyUp","onKeyUpHandler","onCompositionStart","onCompositionStartHandler","onCompositionEnd","onCompositionEndHandler","onPaste","onPasteHandler","onCut","onCutHandler","onInput","onInputHandler","TextContent_TextContent","TextField_classPrivateFieldSet","_this3","TextField_classPrivateFieldGet","preventDefault","keyCode","ctrlKey","metaKey","altKey","_this$tfState","curBlock","getBlocksByRange","beforeBlock","isWin","navigator","platform","isMac","ctrlOrMeta","isAlt","selectAll","onInputText","getPressBackSpaceRange","deleteText","getPressDeleteRange","deleteTextByRange","wrap","insertText","_this4","oldText","newText","target","addLen","addText","clipboardData","getData","execCommand","Block","Block_classCallCheck","Block_key","_inlineStyleRanges","_text","Block_defineProperty","BLOCK","Block_classPrivateFieldSet","Block_classPrivateFieldGet","map","intersect","oldLen","position","newBlock","Block_objectSpread","addStyle","styleName","isCover","Content","Content_classPrivateFieldGet","_blockList","index","appendBlock","array","blockOffset","_block","keyArr","_blockRange","unshift","first","getBlock","margeLen","merge","localRange","styleRange","interRange","Content_objectSpread","clearStyle","SelectionRange","SelectionRange_classPrivateFieldSet","_startKey","_startOffset","_endKey","_endOffset","abs","SelectionRange_classPrivateFieldGet","TextFieldState","EventDispatcher","TextFieldState_classPrivateFieldGet","_selection","_content","doRender","cursorBlock","appendBlockText","secondBlock","getBlockByOffset","split","getBlockIndex","insertBlock","localOffset","setTextStyle","setBlockStyle","setBlockType","TextFieldState_classPrivateFieldSet","_editable","_style","dispatchEvent","TextFieldState_key","LineHeight","TextAlign","textAlign","TextDecoration","textDecoration","FontWeight","fontWeight","FontStyle","fontStyle","FontSize","fontSize","FontFamily","fontFamily","Color","color","BackgroundColor","backgroundColor","__webpack_exports__","TextField_TextField","Block_Block","Content_Content","SelectionRange_SelectionRange","TextFieldState_TextFieldState","SelectionUtil_SelectionUtil","StyleUtil_namespaceObject"],"mappings":"2BACA,IAAAA,EAAA,GAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAC,QAGA,IAAAC,EAAAJ,EAAAE,GAAA,CACAG,EAAAH,EACAI,GAAA,EACAH,QAAA,IAUA,OANAI,EAAAL,GAAAM,KAAAJ,EAAAD,QAAAC,IAAAD,QAAAF,GAGAG,EAAAE,GAAA,EAGAF,EAAAD,QA0DA,OArDAF,EAAAQ,EAAAF,EAGAN,EAAAS,EAAAV,EAGAC,EAAAU,EAAA,SAAAR,EAAAS,EAAAC,GACAZ,EAAAa,EAAAX,EAAAS,IACAG,OAAAC,eAAAb,EAAAS,EAAA,CAA0CK,YAAA,EAAAC,IAAAL,KAK1CZ,EAAAkB,EAAA,SAAAhB,GACA,oBAAAiB,eAAAC,aACAN,OAAAC,eAAAb,EAAAiB,OAAAC,YAAA,CAAwDC,MAAA,WAExDP,OAAAC,eAAAb,EAAA,cAAiDmB,OAAA,KAQjDrB,EAAAsB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAArB,EAAAqB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFA1B,EAAAkB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAArB,EAAAU,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAzB,EAAA6B,EAAA,SAAA1B,GACA,IAAAS,EAAAT,KAAAqB,WACA,WAA2B,OAAArB,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAH,EAAAU,EAAAE,EAAA,IAAAA,GACAA,GAIAZ,EAAAa,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD/B,EAAAkC,EAAA,GAIAlC,IAAAmC,EAAA,sBClFA,MAAAC,EAAcpC,EAAQ,GACtBqC,EAAcrC,EAAQ,GACtBsC,EAAiBtC,EAAQ,GACzBuC,EAAiBvC,EAAQ,IACzBwC,EAAuBxC,EAAQ,GAC/ByC,EAAiBzC,EAAQ,GAEzBG,EAAAD,QAAA,CACAkC,QACAC,QACAC,WACAC,WACAC,iBACAC,2BCbAtC,EAAAD,QAAAwC,QAAA,wBCAA,MAAAC,EAAAxB,OAAA,SACAyB,EAAAzB,OAAA,UACA,IAAA0B,EAAA,IACAC,EAAA,GAEA,MAAAV,EAMAW,YAAAC,EAAA,EAAAC,EAAA,GACAC,KAAAF,QACAE,KAAAD,SAOAF,UACA,IAAAI,EAAA,GACA,QAAA/C,EAAA,EAAuBA,EAAA8C,KAAAD,OAAiB7C,IACxC+C,EAAAC,KAAAF,KAAAF,MAAA5C,GAEA,OAAA+C,EAOAJ,QACA,OAAAG,KAAAD,OAAA,EACAC,KAAAG,UAEAH,KAAAF,MAGAD,QACA,WAAAX,EAAAc,KAAAF,MAAAE,KAAAD,QAGAD,YACA,OAAAE,KAAAP,GAGAK,UAAA3B,GACAA,EAAAiC,OAAAjC,GACAkC,MAAAlC,QAAAmC,KAAAnC,KAAAmC,IACAN,KAAAP,GAAA,EAEAO,KAAAP,GAAAc,KAAAC,MAAArC,GAIA4B,aACA,OAAAC,KAAAN,GAGAK,WAAA5B,GACAA,EAAAiC,OAAAjC,GACAkC,MAAAlC,QAAAmC,KAAAnC,KAAAmC,IACAN,KAAAN,GAAA,EAEAM,KAAAN,GAAAa,KAAAE,IAAA,EAAAF,KAAAC,MAAArC,IAKAuC,UACA,OAAAV,KAAAF,MAGAY,QAAAvC,GACA,GAAA6B,KAAAU,MAAAH,KAAAC,MAAAJ,OAAAjC,IAAA,OACA,IAAAwC,EAAAX,KAAAS,IACAT,KAAAF,MAAA3B,EACA6B,KAAAD,OAAAY,EAAAxC,EAAA,EAGAsC,UACA,WAAAT,KAAAD,OACAC,KAAAF,MAEAE,KAAAF,MAAAE,KAAAD,OAAA,EAGAU,QAAAtC,GACA6B,KAAAS,MAAAF,KAAAC,MAAAJ,OAAAjC,MACA6B,KAAAD,OAAAQ,KAAAE,IAAA,EAAAtC,EAAA6B,KAAAU,IAAA,IAQAb,WAAAV,GACA,OAAAa,KAAAU,KAAAvB,EAAAuB,KAAAV,KAAAS,KAAAtB,EAAAsB,KAAAT,KAAAD,QAAAZ,EAAAY,OAQAF,YAAAV,GACA,OAAAa,KAAAU,KAAAvB,EAAAuB,KAAAV,KAAAU,KAAAvB,EAAAsB,KACAT,KAAAS,KAAAtB,EAAAuB,KAAAV,KAAAS,KAAAtB,EAAAsB,KACAtB,EAAAuB,KAAAV,KAAAU,KAAAvB,EAAAuB,KAAAV,KAAAS,KACAtB,EAAAsB,KAAAT,KAAAU,KAAAvB,EAAAsB,KAAAT,KAAAS,IAQAZ,IAAA1B,GACA,OAAAA,GAAA6B,KAAAU,KAAAvC,GAAA6B,KAAAS,IAQAZ,MAAAV,GACA,OAAAa,KAAAF,QAAAX,EAAAW,OAAAE,KAAAD,SAAAZ,EAAAY,OAGAF,WACA,cAAuBG,KAAAU,YAAiBV,KAAAS,eAAoBT,KAAAD,UAG5DF,cAAAC,EAAA,EAAAC,EAAA,GACA,GAAAH,EAAAG,OAAA,GACA,MAAAZ,EAAAS,EAAAgB,MAGA,OAFAzB,EAAAW,QACAX,EAAAY,SACAZ,EAEA,WAAAD,EAAAY,EAAAC,GAGAF,eAAAV,GACAA,aAAAD,IAEAC,EAAAW,MAAA,EACAX,EAAAY,OAAA,EAEAH,EAAAG,OAAA,GAAAJ,GACAC,EAAAM,KAAAf,KAMAlC,EAAAD,QAAAkC,iBC/JAjC,EAAAD,QAAAwC,QAAA,6BCAAvC,EAAAD,QAAAwC,QAAA,+BCAA,MAAAN,EAAcpC,EAAQ,GAsGtBG,EAAAD,QA9FA,KAAA6D,KACA,OAAAA,EAAAd,OACA,SAEA,IAAAe,EAAA,CAAAD,EAAAE,QAAAC,SAIA,IAHAH,EAAAI,KAAA,CAAAC,EAAAC,IACAD,EAAApB,MAAAqB,EAAArB,OAEAe,EAAAd,OAAA,IACA,IAAAqB,EAAAP,EAAAE,QAAAC,QACA,QAAA9D,EAAA,EAAuBA,EAAA4D,EAAAf,OAAoB7C,IAAA,CAC3C,MAAAmE,EAAAP,EAAA5D,GACA,oBAAAmE,GAAA,iBAAAD,GACA,GAAAC,IAAAD,EACA,cAGA,oBAAAC,GAAAD,aAAAE,OACA,QAAAF,EAAAG,QAAAF,GACA,cAGA,GAAAA,aAAAC,OAAA,iBAAAF,EAAA,CACA,MAAAI,EAAAH,EAAAE,QAAAH,GACA,QAAAI,GAAA,IAAAA,EAAA,CACA,MAAAC,EAAAJ,EAAAK,MAAAF,GACAV,EAAA5D,GAAAmE,EAAAK,MAAA,EAAAF,GACAV,EAAAa,OAAAzE,EAAA,IAAAuE,GACA,YAGA,GAAAJ,aAAAC,OAAAF,aAAAE,MAAA,CAEA,MAAAM,EAAAP,EAAA,GACAQ,EAAAR,IAAAtB,OAAA,GACA+B,EAAAV,EAAA,GACAW,EAAAX,IAAArB,OAAA,GACA,IAAAW,EAAA,KAQA,GAPAkB,EAAAE,EACAD,GAAAC,IACApB,EAAAoB,GAEiBF,GAAAE,GAAAF,GAAAG,IACjBrB,EAAAH,KAAAE,IAAAmB,EAAAE,IAEA,OAAApB,EACA,SAGA,MAAAc,EAAAH,EAAAE,QAAAb,GACAsB,EAAAZ,EAAAG,QAAAb,GACAU,IAAAM,MAAAM,GAEA,MAAAC,EAAA1B,KAAAG,IAAAW,EAAAtB,OAAAyB,EAAAJ,EAAArB,QACA,GAAAyB,EAAAS,EAAAZ,EAAAtB,QAAA,IAAAyB,EAAA,CACA,MAAAC,EAAAJ,EAAAK,MAAAF,EAAAS,GACAnB,EAAA5D,GAAAmE,EAAAK,MAAA,EAAAF,GACAV,EAAAa,OAAAzE,EAAA,IAAAuE,GACA,MAKA,GAFAJ,EAAAM,OAAAH,EAAAS,GACAb,EAAAO,OAAA,EAAAM,GACA,IAAAb,EAAArB,OACA,QAQAe,IAAAoB,OAAA/D,GACAA,aAAAmD,OAAAnD,EAAA4B,OAAA,GAGA,iBAAA5B,GAIA,MAAAgE,EAAA,GACA,QAAAjF,EAAA,EAAmBA,EAAA4D,EAAAf,OAAoB7C,IAAA,CACvC,MAAAkF,EAAAtB,EAAA5D,GACAkF,aAAAd,MACAa,EAAAjC,KAAAhB,EAAAV,OAAA4D,EAAA,GAAAA,EAAArC,SAEA,iBAAAqC,GACAD,EAAAjC,KAAAhB,EAAAV,OAAA4D,EAAA,IAIA,OAAAD,qBCnGcrF,EAAQ,GAgDtBG,EAAAD,QAzCA,KAAA6D,KACA,OAAAA,EAAAd,OACA,SAEA,MAAAsC,EAAAxB,EAAAE,QAAAuB,QACA,KAAAzB,EAAAd,OAAA,IACA,MAAAwC,EAAA1B,EAAAE,QACA,OAAAsB,EAAAtC,QAAA,IAAAwC,EAAAxC,QACA,GAAAsC,EAAAvC,MAAAyC,EAAA7B,KAAA2B,EAAAvC,MAAAyC,EAAA9B,IACA,cAES,OAAA4B,EAAAtC,QAAA,IAAAwC,EAAAxC,OAAA,CACT,KAAAwC,EAAAzC,OAAAuC,EAAA3B,KAAA6B,EAAAzC,OAAAuC,EAAA5B,KAIA,SAHA4B,EAAAvC,MAAAyC,EAAAzC,MACAuC,EAAAtC,OAAA,OAIS,OAAAsC,EAAAtC,QAAA,IAAAwC,EAAAxC,QACT,GAAAsC,EAAAvC,QAAAyC,EAAAzC,MACA,cAGA,GAAAuC,EAAA3B,IAAA6B,EAAA7B,IAAA,CACA,GAAA2B,EAAA5B,IAAA8B,EAAA7B,IACA,SAEA2B,EAAA3B,IAAA6B,EAAA7B,IACA2B,EAAA5B,IAAAF,KAAAG,IAAA2B,EAAA5B,IAAA8B,EAAA9B,SAEa,MAAA4B,EAAA3B,KAAA6B,EAAA7B,KAAA2B,EAAA3B,KAAA6B,EAAA9B,KAIb,SAHA4B,EAAA3B,IAAAH,KAAAE,IAAA4B,EAAA3B,IAAA6B,EAAA7B,KACA2B,EAAA5B,IAAAF,KAAAG,IAAA2B,EAAA5B,IAAA8B,EAAA9B,MAMA,OAAA4B,wCC7CA,MAAAnD,EAAcpC,EAAQ,GAqBtBG,EAAAD,QAbA,EAAA0D,EAAAD,KACA,QAAA+B,IAAA/B,EACA,OAAAvB,EAAAV,OAAAkC,EAAA,GAGA,GAAAA,EAAAD,EAAA,CACA,IAAArC,EAAAsC,EACAA,EAAAD,EACAA,EAAArC,EAEA,OAAAc,EAAAV,OAAAkC,EAAAD,EAAAC,EAAA,sBClBA,MAAAxB,EAAcpC,EAAQ,GAqCtBG,EAAAD,QA3BA,KAAA6D,KACA,MAAAsB,EAAA,GAIA,IAHAtB,EAAAI,KAAA,CAAAC,EAAAC,IACAD,EAAAR,IAAAS,EAAAT,KAEAG,EAAAd,OAAA,IACA,MAAA0C,EAAA5B,EAAAE,QAAAuB,QACAI,EAAA,GACA,QAAAxF,EAAA,EAAuBA,EAAAiF,EAAApC,OAAiB7C,IAAA,CACxC,IAAAiC,EAAAgD,EAAAjF,GACAuF,EAAAE,YAAAxD,KACAuD,EAAAxC,KAAAhD,GACAuF,EAAA/B,IAAAH,KAAAG,IAAA+B,EAAA/B,IAAAvB,EAAAuB,KACA+B,EAAAhC,IAAAF,KAAAE,IAAAgC,EAAAhC,IAAAtB,EAAAsB,MAIA,QAAAvD,EAAAwF,EAAA3C,OAAA,EAAyC7C,GAAA,EAASA,IAAA,CAClD,IAAA0F,EAAAT,EAAAR,OAAAe,EAAAxF,GAAA,MACAgC,EAAA2D,QAAAD,GAGAT,EAAAjC,KAAAuC,GAEA,OAAAN,qBClCcrF,EAAQ,GAAtB,MACAyC,EAAiBzC,EAAQ,GACzBwC,EAAuBxC,EAAQ,GAO/B,IAuCAgG,EAAA,CAAAC,EAAAC,KACA,IAAAC,EAAA1D,EAAAwD,EAAAC,GACAE,EAAA3D,EAAAyD,EAAAD,GACAI,EAAA7D,EAAAyD,EAAAC,GACA/C,EAAA,GAWA,OAVAgD,EAAAlD,OAAA,GACAE,EAAAC,QAAA+C,GAEAC,EAAAnD,OAAA,GACAE,EAAAC,QAAAgD,GAEAC,EAAApD,OAAA,GACAE,EAAAC,QAAAiD,GAEAlD,EAAAgB,KAAA,CAAAC,EAAAC,IAAqBD,EAAAR,IAAAS,EAAAT,KACrBT,GAGAhD,EAAAD,QAzDA,KAAA6D,KACA,IAAAsB,EAAA,GACAiB,EAAAvC,EACA,KAAAuC,EAAArD,OAAA,IACA,IAAA0C,EAAAW,EAAArC,QAAAuB,QACAe,EAAA,GACA,QAAAnG,EAAA,EAAuBA,EAAAiF,EAAApC,OAAmB7C,IAAA,CAC1C,IAAAoG,EAAAnB,EAAAjF,GACAmG,EAAAnD,QAAAZ,EAAAmD,EAAAa,IAEA,IAAAC,EAAAhE,EAAAkD,KAAAY,GAGAG,EAAA,GACA,QAAAtG,EAAA,EAAuBA,EAAAiF,EAAApC,OAAmB7C,IAAA,CAC1C,IAAAoG,EAAAnB,EAAAjF,GACAuG,GAAA,EACA,QAAAC,EAAA,EAA2BA,EAAAL,EAAAtD,OAAoB2D,IAAA,CAC/C,IAAAC,EAAAN,EAAAK,GACA,GAAAJ,EAAAX,YAAAgB,GAAA,CACAF,GAAA,EACAJ,EAAA1B,OAAA+B,EAAA,GACAF,EAAAtD,QAAA4C,EAAAQ,EAAAK,IACA,OAGAF,GACAD,EAAAtD,KAAAoD,GAKAE,EAAAtD,QAAAqD,GACApB,EAAAqB,EAGA,OADArB,EAAAlB,KAAA,CAAAC,EAAAC,IAAwBD,EAAAR,IAAAS,EAAAT,KACxByB,ymCC3CqByB,sZAAuBC,mBAAvBD,eACD3F,OAAO,kHCHrB6F,EAAQ,GAORC,EAAe,SAASC,GAG1B,IAAIC,EACJ,IAHAD,EAAUA,GAAS,GACnBA,EAASzD,KAAKG,IAAIsD,EAAQ,MAEd,CAER,IADAC,EAAM1D,KAAK2D,SAASC,SAAS,IAAIC,UAAU,GACpCH,EAAIlE,OAASiE,GAChBC,GAAO1D,KAAK2D,SAASC,SAAS,IAAIC,UAAU,GAEhD,IAAyB,IAAtBN,EAAMvC,QAAQ0C,GAAU,CACvBH,EAAM5D,KAAK+D,GACX,OAGR,OAAOA,EAAIG,UAAU,EAAGJ,soCClB5B,IAAIpE,EAAU,GAKOyE,cAUjB,SAAAA,EAAYvE,EAAOC,GAAsB,IAAAuE,MAAdC,EAAcC,UAAAzE,OAAA,QAAAyC,IAAAgC,UAAA,GAAAA,UAAA,GAAN,KAAM,mGAAAC,CAAAzE,KAAAqE,KACrCrE,KAAAsE,MAAAI,EAAAL,GAAAhH,KAAA2C,KAAMF,EAAOC,kDADwB4E,EAAAC,IAAAC,EAAAP,GAAA,CAAAQ,UAAA,EAAA3G,WAAA,IAQrCmG,EAAKC,MAAQA,4OAEbQ,CAAAF,EAAAP,GAAAK,EAAYZ,EAAa,IAVYO,wPAVCpF,gDA+F5BY,EAAOC,GAAsB,IAAdwE,EAAcC,UAAAzE,OAAA,QAAAyC,IAAAgC,UAAA,GAAAA,UAAA,GAAN,KACjC,GAAI5E,EAAQG,OAAS,EAAG,CACpB,IAAMiF,EAAMpF,EAAQgB,MAIpB,OAHAoE,EAAIlF,MAAQA,EACZkF,EAAIjF,OAASA,EACbiF,EAAIT,MAAQA,EACLS,EAEP,OAAO,IAAIX,EAAiBvE,EAAOC,EAAQwE,mCAQpCS,GACRA,aAAeX,IACdW,EAAIT,MAAQ,KACZS,EAAIlF,MAAQkF,EAAIjF,OAAS,EACzBH,EAAQM,KAAK8E,uCAhEfC,GACF,IAAGC,EAAAR,EAAAL,EAAAvF,WAAA,QAAAkB,MAAA3C,KAAA2C,KAAaiF,GACZ,OAAO,EAGX,IAAIA,EAAGV,QAAUvE,KAAKuE,MAClB,OAAO,EAGX,GAAGU,EAAGV,OAASvE,KAAKuE,MAAM,CACtB,IAAMY,EAAQvH,OAAOwH,KAAKpF,KAAKuE,OACzBc,EAAQzH,OAAOwH,KAAKH,EAAGV,OAC7B,GAAGY,EAAMpF,SAAWsF,EAAMtF,OACtB,OAAO,EAEX,IAAK,IAAI7C,EAAI,EAAGA,EAAIiI,EAAMpF,OAAQ7C,IAAK,CACnC,IAAMuB,EAAM0G,EAAMjI,GAClB,GAAG8C,KAAKuE,MAAM9F,KAASwG,EAAGV,MAAM9F,GAC5B,OAAO,EAGf,OAAO,EAGX,OAAO,kCAQP,IAAMwG,EAAK,IAAIZ,EAAiBrE,KAAKF,MAAOE,KAAKD,QAEjD,OADAkF,EAAGV,wUAAHe,CAAA,GAAeL,EAAGV,MAAUvE,KAAKuE,OAC1BU,8BA9DC,0JAAAM,CAAOvF,KAAP2E,kLC/BKa,kIAKFvH,OAAO,YALLuH,UAUFvH,OAAO,2kDCHLwH,gaAAkBC,yDAYhBC,GACf,OAAGA,EAAMC,OAASJ,EAAUK,MACjBC,EAAA5E,EAAA6E,cAAA,cAAYC,WAAUL,EAAMlH,IAAKwH,GAAIN,EAAMlH,IAAK8F,MAAOoB,EAAMpB,OAAQkB,EAAUS,cAAcP,IAG7FG,EAAA5E,EAAA6E,cAAA,KAAGC,WAAUL,EAAMlH,IAAKwH,GAAIN,EAAMlH,IAAK8F,MAAOoB,EAAMpB,OAAQkB,EAAUS,cAAcP,0CAQ9EA,GACjB,IAAIQ,EAAO,GACPC,EAAS,EAEb,GAAuB,IAApBT,EAAMU,KAAKtG,OACV,MAAO,KAIX,IADA,IAAIuG,EAAeb,EAAUc,uBAAuBZ,GAC7CS,EAAST,EAAMU,KAAKtG,QAAQ,CAC/B,IAAIsG,EAAO,GACLG,EAAKF,EAAavF,QACrByF,GACIJ,EAASI,EAAG1G,QACXuG,EAAOV,EAAMU,KAAKjC,UAAUgC,EAAQI,EAAG1G,OACvCqG,EAAKjG,KAAKmG,IAGdD,EAASI,EAAG1G,MAEZuG,EAAOV,EAAMU,KAAKI,OAAOL,EAAQI,EAAGzG,QACpCoG,EAAKjG,KAAK4F,EAAA5E,EAAA6E,cAAA,QAAMtH,IAAK+H,EAAG/H,IAAKuH,WAAUQ,EAAG/H,IAAK8F,MAAOiC,EAAGjC,OAAQ8B,IAEjED,GAAUI,EAAGzG,SAGbsG,EAAOV,EAAMU,KAAKjC,UAAUgC,EAAQT,EAAMU,KAAKtG,QAC/CoG,EAAKjG,KAAKmG,GAEVD,EAAST,EAAMU,KAAKtG,QAG5B,OAAOoG,iDAImBR,GAE1B,IAAMW,EAAe,GA0BrB,OAxBejH,WAAQqH,WAAR,EAAAC,EAAYhB,EAAMiB,oBAC1BC,QAAQ,SAAC1H,GAGZ,IADA,IAAIoF,EAAQ,KACHrH,EAAI,EAAGA,EAAIyI,EAAMiB,kBAAkB7G,OAAQ7C,IAAK,CACrD,IAAM+H,EAAKU,EAAMiB,kBAAkB1J,GAC/BiC,EAAMW,OAASmF,EAAGnF,QACdX,EAAMW,MAAQmF,EAAGnF,MAAQmF,EAAGlF,QAA2B,IAAjB4F,EAAM5F,UAClC,OAAVwE,IACAA,EAAQ,IAEI,MAAZU,EAAGV,QACHA,EAAQuC,EAAA,GAAIvC,EAAUU,EAAGV,SAKxB,MAATA,GACA+B,EAAapG,KAAKmE,EAAiB7F,OAAOW,EAAMW,MAAOX,EAAMY,OAAQwE,MAMtE+B,wCAlFP,IAAMX,EAAQ3F,KAAK+G,MAAMpB,MACzB,OAAOF,EAAUuB,YAAYrB,i1BARhBF,cAEE,CACfE,MAAOsB,IAAUrI,OAAOsI,iBCNXC,gaAAoBzB,uDAK5B,IACE0B,EAAWpH,KAAK+G,MAAhBK,QACP,OACItB,EAAA5E,EAAA6E,cAAA,OAAKsB,UAAU,eAAerH,KAAKsH,gBAAgBF,4CAS3CA,GACZ,IAAIjB,EAAO,GAIX,OAHAiB,EAAQG,eAAeV,QAAQ,SAACW,GAC5BrB,EAAKjG,KAAK4F,EAAA5E,EAAA6E,cAAC0B,EAAD,CAAWhJ,IAAK+I,EAAE/I,IAAKkH,MAAO6B,OAErCrB,4TAtBMgB,cACE,CACfC,QAAUH,IAAUrI,OAAOsI,iBCNdQ,kTAUCC,EAASC,EAASC,GAChCF,EAAUA,EAAQjJ,KAAKkJ,GADuB,QAAAE,EAAAtD,UAAAzE,OAALc,EAAK,IAAAS,MAAAwG,EAAA,EAAAA,EAAA,KAAAnD,EAAA,EAAAA,EAAAmD,EAAAnD,IAAL9D,EAAK8D,EAAA,GAAAH,UAAAG,GAE9C,OAAOoD,WAAUrB,WAAV,GAAWiB,EAASE,GAApBG,OAA6BnH,iNCV5C,IAAIoH,EAAW,EAEMC,mLAMLC,GACR,IACIC,EADAC,EAAMC,OAAOC,eAGjB,GAAoB,IAAjBF,EAAIG,WAAP,CAUAP,EAAW,EAEX,IACIG,EAAWC,EAAII,WAAW,GAC5B,MAAOC,GACL,OAnBa,IAsBVjK,EAA2B0J,EAA3B1J,IAAKkK,EAAsBR,EAAtBQ,UAAWvB,EAAWe,EAAXf,QAEvB,GAAwB,IAArBA,EAAQwB,WAGP,OAFAD,EAAUE,aACVC,QAAQC,IAAI,QAASJ,EAAUxE,YAInC,IAAI6E,EAAS,SAACC,EAAU7C,GACpB,GAA0B,gBAAvB6C,EAAS5B,UAA4B,CACpC,IAAI1B,EAAQyB,EAAQG,eAAehH,KAAKE,IAAI,EAAG2F,EAAO,IACtD,YAAa5D,IAAVmD,EACQA,EAAMlH,IAGN,GAIf,IAAIyK,EAAY,SAAZA,EAAaC,GACb,GAAGA,IAAcF,GAIjB,GAA0B,UAAvBE,EAAUC,SAGb,IAAK,IAAIlM,EAAI,EAAGA,EAAIiM,EAAUE,WAAWtJ,OAAQ7C,IAE7C,GADAgM,EAAUC,EAAUE,WAAWnM,IAC5BoM,EACC,YATJA,GAAO,GAcTC,EAAQC,SAASC,eAAehL,GACtC,IAAI8K,EAAM,MAAO,GACjB,IAAMG,EAAaH,EAAMF,WAAW,GACpC,IAAIK,EAAW,MAAO,GAEtB,IADA,IAAIJ,GAAO,EACFpM,EAAI,EAAGA,EAAIwM,EAAWL,WAAWtJ,OAAQ7C,IAAK,CACnD,IAAMyM,EAAYD,EAAWL,WAAWnM,GAGxC,GAFAgM,EAAUS,GAEPL,EACC,OAAOK,EAAUC,QAAV,IAGf,MAAO,IAGPC,EAAkB,SAACZ,EAAU7C,GAC7B,GAAwB,gBAArB6C,EAAS5B,UACZ,CACI,IAAM1B,EAAQyB,EAAQG,eAAehH,KAAKE,IAAI,EAAE2F,EAAO,IACvD,QAAa5D,IAAVmD,EACC,OAAO,EAEX,IAAMmE,EAAa1C,EAAQ2C,cAAcpE,EAAMlH,KAC/C,OAAgB,OAAbqL,EACQ,EAEJA,EAAWrJ,IAAI,EAG1B,IAAIyI,EAAY,SAAZA,EAAaC,GACb,GAAGA,IAAcF,EAGb,OAFAe,GAAS5D,OACTkD,GAAO,GAGX,GAA0B,UAAvBH,EAAUC,UAIb,IAAK,IAAIlM,EAAI,EAAGA,EAAIiM,EAAUE,WAAWtJ,OAAQ7C,IAE7C,GADAgM,EAAUC,EAAUE,WAAWnM,IAC5BoM,EACC,YANJU,GAASb,EAAUpJ,QAWrBwJ,EAAQC,SAASC,eAAehL,GACtC,IAAI8K,EAAM,OAAO,EACjB,IAAMG,EAAaH,EAAMF,WAAW,GACpC,IAAIK,EAAW,OAAO,EAGtB,IAFA,IAAIJ,GAAO,EACPU,EAAQ,EACH9M,EAAI,EAAGA,EAAIwM,EAAWL,WAAWtJ,OAAQ7C,IAAK,CASnD,GAPAgM,EADkBQ,EAAWL,WAAWnM,IAIrCA,EAAE,GAA8C,OAAzCwM,EAAWL,WAAWnM,EAAE,GAAG+M,YACjCD,GAAS,GAGVV,EACC,OAAOU,EAGf,OAAO,GAGLE,EAAWlB,EAAOZ,EAAS+B,eAAgB/B,EAASgC,aACpDA,EAAcP,EAAgBzB,EAAS+B,eAAgB/B,EAASgC,aAChEC,EAASrB,EAAOZ,EAASkC,aAAclC,EAASmC,WAChDA,EAAYV,EAAgBzB,EAASkC,aAAclC,EAASmC,WAClE5B,EAAU6B,OAAON,EAAUE,EAAaC,EAAQE,GAEhDzB,QAAQC,IAAI,QAASJ,EAAUxE,iBAhIxB8D,IAAa,GACZP,EAAUK,WAAWG,EAAcuC,KAAM,KAAM,EAAGtC,GAGlDF,EAAW,8BAmIZE,GAAS,IACXQ,EAAaR,EAAbQ,UAEDO,EAAY,SAAZA,EAAa/G,EAAQgH,EAAWuB,GAChC,GAA0B,UAAvBvB,EAAUC,UAA+C,OAAvBD,EAAUC,SAAkB,CAC7D,IAAMuB,OAAyBnI,IAAnB2G,EAAUpJ,OAAmB,EAAEoJ,EAAUpJ,OACrD,GAAG2K,GAAgBvI,EAAO6H,MAAMW,EAI5B,OAHAxI,EAAOiE,OAASsE,EAAavI,EAAO6H,MACpC7H,EAAOyI,KAAOzB,OACdhH,EAAOmH,MAAO,GAIdnH,EAAO6H,OAASb,EAAUpJ,OAGlC,IAAK,IAAI7C,EAAI,EAAGA,EAAIiM,EAAUE,WAAWtJ,OAAQ7C,IAE7C,GADAgM,EAAU/G,EAAQgH,EAAUE,WAAWnM,GAAIwN,GACxCvI,EAAOmH,KACN,QAYNuB,EAAc,SAACpM,EAAKqM,GAItB,IAHA,IAAM3I,EAAS,CAACyI,KAAK,KAAMxE,OAAO,EAAG4D,MAAM,EAAGV,MAAK,GAE7CyB,EADQvB,SAASC,eAAetB,EAAQ1J,KACrB4K,WAAW,GAC3BnM,EAAI,EAAGA,EAAI6N,EAAW1B,WAAWtJ,OAAQ7C,IAAK,CACnD,IAAMyM,EAAYoB,EAAW1B,WAAWnM,GACxC,GAA2B,MAAvByM,EAAUP,UAAoBO,EAAUC,QAAV,MAA6BnL,GAChC,eAAvBkL,EAAUP,UAA6BO,EAAUC,QAAV,MAA6BnL,EAIxE,IAAK,IAAIiF,EAAI,EAAGA,EAAIiG,EAAUN,WAAWtJ,OAAQ2D,IAAK,CAClD,IAAMsH,EAAQrB,EAAUN,WAAW3F,GAGnC,GADAwF,EAAU/G,EAAQ6I,EAAOF,GACtB3I,EAAOmH,KACN,OAAOnH,OAKfA,EAAO6H,OAASL,EAAUM,UAAUlK,OACjC7C,EAAE,EAAE6N,EAAW1B,WAAWtJ,QAAgC,OAAtB4J,EAAUM,YAC7C9H,EAAO6H,OAAS,GAI5B,OAAO7H,GAGL8I,EAAYJ,EAAYlC,EAAUuB,SAAUvB,EAAUyB,aACtDc,EAAYL,EAAYlC,EAAU0B,OAAQ1B,EAAU4B,WACpDnC,EAAWoB,SAAS2B,cAC1B/C,EAASgD,SAASH,EAAUL,KAAMK,EAAU7E,QAC5CgC,EAASiD,OAAOH,EAAUN,KAAMM,EAAU9E,QAC1C,IAAMiC,EAAMC,OAAOC,eACnBF,EAAIiD,kBACJjD,EAAIkD,SAASnD,qCAOAD,GAAQ,IACdf,EAAsBe,EAAtBf,QAASuB,EAAaR,EAAbQ,UACV6C,EAAYpE,EAAQG,eAC1B,GAAGiE,EAAUzL,OAAS,EAAE,CACpB,IAAM0L,EAAaD,EAAU,GACvBE,EAAYF,EAAUA,EAAUzL,OAAO,GAC7C4I,EAAU6B,OAAOiB,EAAWhN,IAAK,EAAGiN,EAAUjN,IAAK2I,EAAQuE,UAAU5L,QACrEmI,EAActD,IAAIuD,mDASIA,GAAQ,IAC3Bf,EAAsBe,EAAtBf,QACDwE,EADuBzD,EAAbQ,UACWxJ,MAa3B,OAZwB,IAArBiI,EAAQwB,YACPgD,EAAS9L,MAAQ,EACjB8L,EAAS7L,OAAS,GAEM,IAApB6L,EAAS7L,SACb6L,EAAS9L,OAAS,EAClB8L,EAAS9L,MAAQS,KAAKE,IAAImL,EAAS9L,MAAO,GAC1C8L,EAAS7L,OAAS,EACfoI,EAAQ9B,KAAKwF,YAAYD,EAAS9L,MAAM,GAAK,QAC5C8L,EAASlL,KAAO,IAGjBkL,8CAQgBzD,GAAQ,IACxBf,EAAsBe,EAAtBf,QACDwE,EADuBzD,EAAbQ,UACWxJ,MAY3B,OAXwB,IAArBiI,EAAQwB,YACPgD,EAAS9L,MAAQ,EACjB8L,EAAS7L,OAAS,GAEM,IAApB6L,EAAS7L,SACb6L,EAAS9L,MAAQS,KAAKG,IAAIkL,EAAS9L,MAAOqI,EAAQ9B,KAAKtG,QACvD6L,EAAS7L,OAAS,EACfoI,EAAQ9B,KAAKwF,YAAYD,EAAS9L,OAAS,QAC1C8L,EAAS7L,QAAU,IAGpB6L,+xCC7QME,eAkBjB,SAAAA,EAAY/E,GAAO,IAAAzC,MAAA,mGAAAyH,CAAA/L,KAAA8L,KACf9L,KAAAsE,MAAA0H,GAAAF,GAAAzO,KAAA2C,KAAM+G,mDADSkF,GAAArH,IAAAsH,GAAA5H,GAAA,CAAAQ,UAAA,EAAA3G,OAZG,IAYHgO,GAAAvH,IAAAsH,GAAA5H,GAAA,CAAAQ,UAAA,EAAA3G,OANN,IAaTmG,EAAK8H,MAAQ,CACTjE,QAAS7D,EAAKyC,MAAMoB,QACpBkE,WAAY,MAGhB/H,EAAK6D,QAAQmE,iBAAiB1I,EAAe2I,OAAQjI,EAAKkI,gBAA1DN,GAAA5H,IACAA,EAAKmI,iBAAmBnI,EAAKmI,iBAAiB/N,KAAtBwN,GAAA5H,IAbTA,yPAlBgBoB,qEAoCb1F,KAAK+G,MAAhBoB,QACCuE,oBAAoB9I,EAAe2I,OAAQvM,KAAKwM,iBACxDhD,SAASkD,oBAAoB,UAAW1M,KAAKyM,6DAI9BE,EAAWC,EAAWC,GAClC7M,KAAKoM,MAAMC,WAAWS,YACrB5E,EAActD,IAAI5E,KAAKmI,iDAKf4E,GACZ/M,KAAKoM,MAAMC,8UAAXW,CAAA,GAA4BhN,KAAKoM,MAAMC,WAAeU,EAAME,MAC5DjN,KAAKkN,SAAS,qCAGT,IAAAC,EAAAnN,KAAAoN,EACmCpN,KAAK+G,MAAMoB,QAA5C1J,EADF2O,EACE3O,IAAK4O,EADPD,EACOC,SAAU9I,EADjB6I,EACiB7I,MAAO6C,EADxBgG,EACwBhG,QAE7B,OACItB,EAAA5E,EAAA6E,cAAA,OAAKE,GAAIxH,EACJ4I,UAAU,YACViG,gCAAgC,EAChCC,gBAAiBF,EACjB9I,MAAOA,EACPiJ,YAAa,SAACC,GACVN,EAAKO,mBAAmBD,IAE5BE,QAAS,SAACF,GACNvF,EAAcuC,KAAK0C,EAAKhF,UAE5ByF,OAAQ,SAACH,GACLvF,EAAcuC,KAAK0C,EAAKhF,UAE5B0F,UAAW,SAACJ,GACRN,EAAKW,iBAAiBL,IAE1BM,QAAS,SAACN,GACNN,EAAKa,eAAeP,IAExBQ,mBAAoB,SAACR,GACjBN,EAAKe,0BAA0BT,IAEnCU,iBAAkB,SAACV,GACfN,EAAKiB,wBAAwBX,IAEjCY,QAAS,SAACZ,GACNN,EAAKmB,eAAeb,IAExBc,MAAO,SAACd,GACJN,EAAKqB,aAAaf,IAEtBgB,QAAS,SAAChB,GACNN,EAAKuB,eAAejB,KACrB3H,EAAA5E,EAAA6E,cAAC4I,EAAD,CAAavH,QAASA,gDAInBqG,GACfmB,GAAA5O,KAAAmM,IAAkB,GAClB3C,SAAS8C,iBAAiB,UAAWtM,KAAKyM,kBAC1CvE,EAAcuC,KAAKzK,KAAKmI,kDAGXsF,GAAG,IAAAoB,EAAA7O,KAChB4O,GAAA5O,KAAAmM,IAAkB,GAClB3C,SAASkD,oBAAoB,UAAW1M,KAAKyM,kBAC7C/E,EAAUK,WAAW,WACjBG,EAAcuC,KAAKoE,EAAK1G,UACzBnI,KAAM,4CAGIyN,GACb,GAAAqB,GAAI9O,KAAJmM,IACIsB,EAAEsB,qBADN,CADgB,IAMTtQ,EAA0CgP,EAA1ChP,IAAKuQ,EAAqCvB,EAArCuB,QAASC,EAA4BxB,EAA5BwB,QAASC,EAAmBzB,EAAnByB,QAASC,EAAU1B,EAAV0B,OANvBC,EAOapP,KAAKmI,QAA3BQ,EAPSyG,EAOTzG,UAAWvB,EAPFgI,EAOEhI,QAIlB,GAAY,YAAR3I,EAAmB,CACnB,IAAM4Q,EAAWjI,EAAQkI,iBAAiB3G,EAAUxJ,OAAO,GAC3D,GAAIkQ,EAEA,IADA,IAAMlJ,EAAOiB,EAAQG,eACZrK,EAAI,EAAGA,EAAIiJ,EAAKpG,OAAQ7C,IAC7B,GAAIiJ,EAAKjJ,GAAGuB,MAAQ4Q,EAAS5Q,IAAK,CAC9B,IAAM8Q,EAAcpJ,EAAKjJ,EAAI,GAC7B,GAA2B,IAAvBqS,EAAYxP,OAAc,CAC1B0N,EAAEsB,iBACF,IAAM5P,EAAQiI,EAAQ2C,cAAcwF,EAAY9Q,KAGhD,OAFAkK,EAAU6B,OAAO+E,EAAY9Q,IAAKU,EAAMW,MAAOyP,EAAY9Q,IAAKU,EAAMW,YACtEoI,EAActD,IAAI5E,KAAKmI,WAQ3C,GAAY,UAAR1J,GAA2B,YAARA,GAA6B,QAARA,GAAyB,SAARA,GAA0B,aAARA,GAA8B,WAARA,GACtF,cAARA,GAA+B,eAARA,GAAgC,YAARA,GAA6B,cAARA,EAD3E,CAIA,IAAM+Q,EC5IqB,UAAvBC,UAAUC,UAAiD,YAAvBD,UAAUC,SD6I5CC,ECrJqB,WAAvBF,UAAUC,UAAkD,WAAvBD,UAAUC,UAAkD,cAAvBD,UAAUC,UAAqD,aAAvBD,UAAUC,SDsJhI,GAAIF,GAASG,EAAO,CAChB,IAAMC,EAAaJ,EAAQ/B,EAAEwB,QAAUxB,EAAEyB,QACnCW,EAAQpC,EAAE0B,OAEhB,GAAIS,IAA2B,KAAZZ,GAA8B,KAAZA,GAA8B,KAAZA,GACnD,OAEJ,GAAIW,GAASE,IAAsB,KAAZb,GAA8B,KAAZA,GAA8B,KAAZA,GAA8B,KAAZA,GACzE,OAEJ,GAAgB,KAAZA,IAAoBW,GAAST,GAAaM,GAASP,GAEnD,YADA/G,EAAc4H,UAAU9P,KAAKmI,SAKrCsF,EAAEsB,iBACFrH,EAAUK,WAAW/H,KAAK+P,YAAa/P,KAAM,EAAGvB,EAAKuQ,EAASC,EAASC,EAASC,yCAGxE1Q,EAAKuQ,EAASC,EAASC,EAASC,GACxC,IAAMhH,EAAUnI,KAAKmI,QACdQ,EAAsBR,EAAtBQ,UAAWvB,EAAWe,EAAXf,QAElB,IAAA0H,GAAI9O,KAAJiM,IAIA,GAAY,cAARxN,EAAqB,CACrB,IAAMmN,EAAW1D,EAAc8H,uBAAuB7H,GACtDA,EAAQ8H,WAAWrE,EAAS9L,MAAO8L,EAAS7L,aACzC,GAAY,WAARtB,EAAkB,CACzB,IAAMmN,EAAW1D,EAAcgI,oBAAoB/H,GACnDA,EAAQ8H,WAAWrE,EAAS9L,MAAO8L,EAAS7L,YACzC,CAGH,IAAM6L,EAAWjD,EAAUxJ,MACxByM,EAAS7L,OAAO,GACfqH,EAAQ+I,kBAAkBvE,GAElB,UAARnN,EACA0J,EAAQiI,KAAKzH,EAAUyB,aAEV,QAAR3L,EACL0J,EAAQkI,WAAW,KAAM1H,EAAUyB,aAGnCjC,EAAQkI,WAAW5R,EAAKkK,EAAUyB,qDAK/BqD,GAENqB,GAAA9O,KAADiM,KACc,eAAVwB,EAAEhP,KACW,cAAVgP,EAAEhP,KACQ,YAAVgP,EAAEhP,KACQ,cAAVgP,EAAEhP,KACTyJ,EAAcuC,KAAKzK,KAAKmI,2DAQNsF,GACtBA,EAAEsB,iBACFH,GAAA5O,KAAAiM,IAA2B,GAC3B,IAAM9D,EAAUnI,KAAKmI,QACfQ,EAAYR,EAAQQ,UACtBA,EAAU5I,OAAS,GACnBoI,EAAQ8H,WAAWtH,EAAUyB,YAAazB,EAAU5I,wDAQpC0N,GAAG,IAAA6C,EAAAtQ,KACvByN,EAAEsB,iBACF,IAAM9B,EAAOQ,EAAER,KACT9E,EAAUnI,KAAKmI,QACfQ,EAAYR,EAAQQ,UAC1BjB,EAAUK,WAAW,WACjB6G,GAAA0B,EAAIrE,IAAuB,GAC3B9D,EAAQkI,WAAWpD,EAAMtE,EAAUyB,cACpCpK,KAAM,0CAGEyN,GACX,IAAAqB,GAAG9O,KAAHiM,IAAA,CAEA,IAAM9D,EAAUnI,KAAKmI,QACfQ,EAAYR,EAAQQ,UACtBA,EAAU5I,OAAS,GACnBoI,EAAQf,QAAQ+I,kBAAkBxH,EAAUxJ,OAEhD,IAAMoR,EAAUpI,EAAQ9B,KAClBmK,EAAU/C,EAAEgD,OAAOxG,UACnByG,EAASF,EAAQzQ,OAASwQ,EAAQxQ,OACxC,GAAG2Q,EAAO,EAAE,CACR,IAAMC,EAAUH,EAAQ/J,OAAOkC,EAAUyB,YAAasG,GACtDvI,EAAQkI,WAAWM,EAAShI,EAAUyB,sDAQ/BqD,GACXmB,GAAA5O,KAAAmM,IAAkB,GAClBsB,EAAEsB,iBACF,IAAM1I,EAAOoH,EAAEmD,cAAcC,QAAQ,QAC9BlI,EAAa3I,KAAKmI,QAAlBQ,UACP3I,KAAKmI,QAAQkI,WAAWhK,EAAMsC,EAAUyB,kDAG/BqD,GACTA,EAAEsB,iBADU,IAELpG,EAAa3I,KAAKmI,QAAlBQ,UACHA,EAAU5I,OAAS,IACnByJ,SAASsH,YAAY,QAAQ,EAAO,OACpC9Q,KAAKmI,QAAQ8H,WAAWtH,EAAUyB,YAAazB,EAAU5I,yCAS7D,OAAOC,KAAKoM,MAAMjE,wCAQlB,OAAOnI,KAAKmI,QAAQf,+jCAlSP0E,eAcE,CACf3D,QAASlB,IAAUrI,OAAOsI,aEnBlC,IAAMtH,GAAU,GAKKmR,cAmCjB,SAAAA,IAAoB,IAAR1K,EAAQ7B,UAAAzE,OAAA,QAAAyC,IAAAgC,UAAA,GAAAA,UAAA,GAAH,gGAAGwM,CAAAhR,KAAA+Q,GAAAE,GAAArM,IAAA5E,KAAA,CAAA8E,UAAA,EAAA3G,MA9Bb,KA8Ba+S,GAAAtM,IAAA5E,KAAA,CAAA8E,UAAA,EAAA3G,MAxBC,KAwBDgT,GAAAvM,IAAA5E,KAAA,CAAA8E,UAAA,EAAA3G,MAlBZ,KAkBYiT,GAAApR,KAAA,QAZZ,MAYYoR,GAAApR,KAAA,OANbwF,EAAU6L,OAObC,GAAAtR,KAAAmR,GAAa9K,GACbiL,GAAAtR,KAAAiR,GAAYlN,EAAa,2DAoMN,IAATsC,EAAS7B,UAAAzE,OAAA,QAAAyC,IAAAgC,UAAA,GAAAA,UAAA,GAAJ,GACf,GAAG5E,GAAQG,OAAO,EAAE,CAChB,IAAM4F,EAAQ/F,GAAQgB,MAEtB,OADA+E,EAAMU,KAAOA,EACNV,EAEX,OAAO,IAAIoL,EAAM1K,mCAONV,GACXA,EAAMU,KAAO,GACb,IAAK,IAAInJ,EAAI,EAAGA,EAAIyI,EAAMiB,kBAAkB7G,OAAQ7C,IAChDmH,EAAiBxB,QAAQ8C,EAAMiB,kBAAkB1J,IAErDyI,EAAMiB,kBAAkB7G,OAAS,EACjC4F,EAAMC,KAAOJ,EAAU6L,MACvB1L,EAAMpB,MAAQ,KACd3E,GAAQM,KAAKyF,2CAlNNxG,GACPmS,GAAAtR,KAAAmR,GAAanR,KAAKqG,KAAKI,OAAO,EAAGtH,EAAMW,OAASE,KAAKqG,KAAKI,OAAOtH,EAAMW,MAAMX,EAAMY,SAEnFuR,GAAAtR,KAAAkR,GAA0BK,GAAAvR,KAAAkR,IAAwBM,IAAI,SAACvM,GACnD,IAAMwM,EAAYnS,yBAAe2F,EAAI9F,GAAO,GAiB5C,YAhBeqD,IAAZiP,GAECxM,EAAGlF,QAAU0R,EAAU1R,OAEpBZ,EAAMuB,IAAIuE,EAAGvE,MACZuE,EAAGnF,OAAUmF,EAAGvE,IAAIvB,EAAMuB,MAO3BvB,EAAMsB,IAAMwE,EAAGvE,MACduE,EAAGnF,OAASX,EAAMY,QAGnBkF,wCASJoB,EAAMD,GACbkL,GAAAtR,KAAAmR,GAAaI,GAAAvR,KAAAmR,IAAW1K,OAAO,EAAGL,GAC5BC,EACAkL,GAAAvR,KAAAmR,IAAW1K,OAAOL,IAGxBkL,GAAAtR,KAAAkR,GAA0BK,GAAAvR,KAAAkR,IAAwBM,IAAI,SAACvM,GASnD,OARKmB,EAASnB,EAAGvE,KAAO0F,GAAUnB,EAAGxE,IAAM,GACrB,IAAdwE,EAAGlF,QAAgBqG,IAAWnB,EAAGvE,KACtB,IAAX0F,GAA2B,IAAXnB,EAAGvE,IACvBuE,EAAGlF,QAAUsG,EAAKtG,OACXqG,GAAUnB,EAAGvE,MACpBuE,EAAGnF,OAASuG,EAAKtG,QAGdkF,mCAQTU,GAAO,IAAArB,EAAAtE,KACH0R,EAAS1R,KAAKD,OACpBuR,GAAAtR,KAAAmR,GAAAI,GAAAvR,KAAAmR,IAAcxL,EAAMU,MAEPV,EAAMiB,kBAAkB4K,IAAI,SAACvM,GACtC,OAAO,IAAIZ,EAAiBY,EAAGnF,MAAM4R,EAAQzM,EAAGlF,OAAQkF,EAAGV,SAG1DsC,QAAQ,SAAC5B,GACVsM,GAAAjN,EAAI4M,IAAoBhR,KAAK+E,mCAS/B0M,GAAU,IAAAxE,EAAAnN,KACZ,GAAG2R,EAAS,GAAKA,EAAS3R,KAAKD,OAC3B,OAAO,KAGX,IAAM6R,EAAWb,EAAMvS,OAAO+S,GAAAvR,KAAAmR,IAAW1K,OAAOkL,IAgChD,OA9BAC,EAASrN,MAATsN,GAAA,GAAqBD,EAASrN,MAAUvE,KAAKuE,OAC7CgN,GAAAvR,KAAAkR,IAAwBrK,QAAQ,SAAC5B,IAC1B0M,GAAU1M,EAAGxE,KAAOkR,IAAWJ,GAAApE,EAAIgE,IAAOpR,UAMtC4R,EAAS1M,EAAGvE,IAEXkR,EAASE,SAAS7M,EAAGV,MAAOU,EAAGnF,MAAM6R,EAAU1M,EAAGlF,QAE9C4R,IAAWJ,GAAApE,EAAIgE,IAAOpR,OAC1B6R,EAASE,SAAS7M,EAAGV,MAAO,EAAG,GAE3BoN,GAAU1M,EAAGvE,KACjBkR,EAASE,SAAS7M,EAAGV,MAAO,EAAGU,EAAGlF,QAAQ4R,EAAS1M,EAAGvE,QAG/DV,MAGHsR,GAAAtR,KAAAmR,GAAaI,GAAAvR,KAAAmR,IAAW1K,OAAO,EAAGkL,IAClCL,GAAAtR,KAAAkR,GAA0BK,GAAAvR,KAAAkR,IAAwBhP,OAAO,SAAC+C,GACtD,OAAGA,EAAGvE,IAAIiR,GACN1M,EAAGxE,IAAMF,KAAKG,IAAIuE,EAAGxE,IAAK8Q,GAAApE,EAAIgE,IAAOpR,QAC9BkF,GAEJ,QAEJ2M,mCASFrN,GAML,IAN+B,IAAnB6B,EAAmB5B,UAAAzE,OAAA,QAAAyC,IAAAgC,UAAA,GAAAA,UAAA,GAAZ,EAAGzE,EAASyE,UAAAzE,OAAA,QAAAyC,IAAAgC,UAAA,GAAAA,UAAA,GAAF,EAEzBuN,EAAYnU,OAAOwH,KAAKb,GAAO,GAG/ByN,GAAU,EACL9U,EAAI,EAAGA,EAAIqU,GAAAvR,KAAAkR,IAAwBnR,OAAQ7C,IAAK,CACrD,IAAM+H,EAAKsM,GAAAvR,KAAAkR,IAAwBhU,GAEnC,GADmBU,OAAOwH,KAAKH,EAAGV,OAAO,KACvBwN,GACX9M,EAAGnF,QAAUsG,GAAUnB,EAAGlF,SAAWA,EAAS,CAC7CwR,GAAAvR,KAAAkR,IAAwBhU,GAAGqH,MAAQA,EACnCyN,GAAU,EACV,OAKZ,IAAIA,EAAQ,CACR,IAAI/M,EAAKZ,EAAiB7F,OAAO4H,EAAQrG,EAAQwE,GACjDU,EAAGV,MAAQA,EACXgN,GAAAvR,KAAAkR,IAAwBhR,KAAK+E,yCAQjC,IAAK,IAAI/H,EAAI,EAAGA,EAAIqU,GAAAvR,KAAAkR,IAAwBnR,OAAQ7C,IAChDmH,EAAiBxB,QAAQ0O,GAAAvR,KAAAkR,IAAwBhU,IAErD8C,KAAK4F,KAAOJ,EAAU6L,MACtBE,GAAAvR,KAAAkR,IAAwBnR,OAAS,EACjCC,KAAKuE,MAAQ,qCAmEb,IAAMoB,EAAQoL,EAAMvS,OAAN+S,GAAavR,KAAbmR,KAMd,OALAnR,KAAK4G,kBAAkBC,QAAQ,SAAC5B,GAC5BU,EAAMmM,SAAS7M,EAAGV,MAAOU,EAAGnF,MAAOmF,EAAGlF,UAE1C4F,EAAMC,KAAO5F,KAAK4F,KAClBD,EAAMpB,MAANsN,GAAA,GAAkBlM,EAAMpB,MAAUvE,KAAKuE,OAChCoB,8BAlEC,OAAA4L,GAAOvR,KAAPiR,mCAOR,OAAOjR,KAAKqG,KAAKtG,iDAQjB,OAAAwR,GAAOvR,KAAPkR,iCAMS,OAAAK,GAAOvR,KAAPmR,kBACJhT,GACLmT,GAAAtR,KAAAmR,GAAahT,6gBCrOrB,IAAMyB,GAAU,GAKMqS,gKAML,4DAmRT,OAAIrS,GAAQG,OAAS,EACVH,GAAQgB,MAEZ,IAAIqR,kCAOA7K,GAEX,IADA,IAAMjB,EAAOiB,EAAQG,eACdpB,EAAKpG,OAAS,GAAG,CACpB,IAAM4F,EAAQQ,EAAKvF,MACnBmQ,GAAMlO,QAAQ8C,GAElB/F,GAAQM,KAAKkH,+CA5Rb,OAAA8K,GAAOlS,KAAPmS,qCAQK1T,GAIL,OAHYyT,GAAAlS,KAAAmS,IAAgBjQ,OAAO,SAACyD,GAChC,OAAOA,EAAMlH,MAAQA,IAEd,sCAQJ+C,GACP,OAAO0Q,GAAAlS,KAAAmS,IAAgB3Q,4CAQVrC,GAAM,IAAAmF,EAAAtE,KACbmG,EAAO,GAOb,OANA+L,GAAAlS,KAAAmS,IAAgBtL,QAAQ,SAAClB,GACFrB,EAAKyF,cAAcpE,EAAMlH,KAC9BkE,YAAYxD,IACtBgH,EAAKjG,KAAKyF,IAEhB3F,MACKmG,2CAQMC,GACb,IAAMjH,EAAQD,QAAMV,OAAO4H,EAAQ,GAC7BT,EAAQ3F,KAAKsP,iBAAiBnQ,GAAO,GAE3C,OADAD,QAAM2D,QAAQ1D,GACPwG,wCAQGlH,GACV,IAAK,IAAIvB,EAAI,EAAGA,EAAIgV,GAAAlS,KAAAmS,IAAgBpS,OAAQ7C,IACxC,GAAGgV,GAAAlS,KAAAmS,IAAgBjV,GAAGuB,MAAMA,EACxB,OAAOvB,EAGf,OAAQ,sCAQAyI,EAAOyM,GACfF,GAAAlS,KAAAmS,IAAgBxQ,OAAOyQ,EAAO,EAAGzM,6CAgBV,IAAXU,EAAW7B,UAAAzE,OAAA,QAAAyC,IAAAgC,UAAA,GAAAA,UAAA,GAAJ,GACbmB,EAAQoL,GAAMvS,OAAO6H,GAE3B,OADArG,KAAKqS,YAAY1M,GACVA,sCAOCA,GACRuM,GAAAlS,KAAAmS,IAAgBjS,KAAKyF,oCAOhBlH,GACL,IAAK,IAAIvB,EAAI,EAAGA,EAAIgV,GAAAlS,KAAAmS,IAAgBpS,OAAQ7C,IACxC,GAAIgV,GAAAlS,KAAAmS,IAAgBjV,GAAGuB,MAAQA,EAG3B,OAFAsS,GAAMlO,QAAQqP,GAAAlS,KAAAmS,IAAgBjV,SAC9BgV,GAAAlS,KAAAmS,IAAgBxQ,OAAOzE,EAAG,qCAWlC,IAAImJ,EAAO,GAOX,OANA6L,GAAAlS,KAAAmS,IAAgBtL,QAAQ,SAAClB,EAAOyM,EAAOE,GACnCjM,GAAQV,EAAMU,KACV+L,EAAQ,EAAIE,EAAMvS,SAClBsG,GAAQ,QAGTA,wCAgBG5H,GAGV,IAFA,IAAM+M,EAAY0G,GAAAlS,KAAHmS,IACXI,EAAc,EACTrV,EAAI,EAAGA,EAAIsO,EAAUzL,OAAQ7C,IAAK,CACvC,IAAMsV,EAAShH,EAAUtO,GACzB,GAAGsV,EAAO/T,MAAQA,EACd,OAAOS,QAAMV,OAAO+T,EAAaC,EAAOzS,OAAO,GAEnDwS,GAAgBC,EAAOzS,OAAO,EAElC,OAAO,+CAQOZ,GAId,IAJqB,IAAAgO,EAAAnN,KACfwL,EAAY0G,GAAAlS,KAAHmS,IAETM,EAAS,GACNvV,EAAIsO,EAAUzL,OAAO,EAAG7C,GAAK,EAAIA,IAAK,CAC3C,IAAIsV,EAAShH,EAAUtO,GACnBwV,EAAc1S,KAAK+J,cAAcyI,EAAO/T,KAEzCU,EAAMuB,KAAKgS,EAAYjS,KAAOtB,EAAMsB,KAAKiS,EAAYjS,MACjC,IAAhBgS,EAAO1S,QACN0S,EAAOE,QAAQnH,EAAUtO,EAAE,GAAGuB,KAElCgU,EAAOE,QAAQH,EAAO/T,MAG9B,GAAGgU,EAAO1S,QAAQ,EAAE,CAChB,IAAM6S,EAAQ5S,KAAK6S,SAASJ,EAAO1R,SAC7B+R,EAAWL,EAAO1S,OACxBZ,EAAMY,QAAU+S,EAEhBL,EAAO5L,QAAQ,SAACpI,GACZ,IAAMkH,EAAQwH,EAAK0F,SAASpU,GAC5B,GAAGkH,EAAM,CACLiN,EAAMG,MAAMpN,GACZ,IAAMyM,EAAQ5G,EAAUjK,QAAQoE,GAChC6F,EAAU7J,OAAOyQ,EAAM,GACvBrB,GAAMlO,QAAQ8C,KAEnB3F,MAEP,IAAK,IAAI9C,EAAI,EAAGA,EAAIsO,EAAUzL,OAAQ7C,IAAK,CACvC,IAAMyI,EAAQ6F,EAAUtO,GAClB4M,EAAa9J,KAAK+J,cAAcpE,EAAMlH,KAC5C,GAAGqL,EAAWnH,YAAYxD,GAAO,CAE7B,IAAM6T,EAAa,IAAI9T,QAAMC,EAAMW,MAAMgK,EAAWhK,MAAOX,EAAMY,QAGjE,OADA4F,EAAMsK,WAAW+C,IACV,GAGf,OAAO,uCASEzO,GAAuC,IAAhC6B,EAAgC5B,UAAAzE,OAAA,QAAAyC,IAAAgC,UAAA,GAAAA,UAAA,GAAvB,EAAGzE,EAAoByE,UAAAzE,OAAA,QAAAyC,IAAAgC,UAAA,GAAAA,UAAA,QAAXhC,OACzBA,IAATzC,IACCA,EAASC,KAAK2L,UAAU5L,QAE5BA,EAASQ,KAAKG,IAAIV,KAAK2L,UAAU5L,OAAQA,GAIzC,IAFA,IAAMkT,EAAa,IAAI/T,QAAMkH,EAAQrG,GAE5B7C,EAAI,EAAGA,EAAIgV,GAAAlS,KAAAmS,IAAgBpS,OAAQ7C,IAAK,CAC7C,IAAMsV,EAASN,GAAAlS,KAAAmS,IAAgBjV,GACzB4M,EAAa9J,KAAK+J,cAAcyI,EAAO/T,KACvCyU,EAAa5T,yBAAe2T,EAAYnJ,GAAY,QACxCtH,IAAf0Q,GACCV,EAAOV,SAASvN,EAAO2O,EAAWpT,MAAMgK,EAAWhK,MAAOoT,EAAWnT,+CAUnEtB,EAAK8F,GACf,IAAMoB,EAAQ3F,KAAK6S,SAASpU,GACzBkH,IACCA,EAAMpB,yUAAN4O,CAAA,GAAkBxN,EAAMpB,MAAUA,yCAS7B9F,EAAKmH,GACd,IAAMD,EAAQ3F,KAAK6S,SAASpU,GACzBkH,GAASA,EAAMC,OAASA,IACvBD,EAAMC,KAAOA,wCAQjBsM,GAAAlS,KAAAmS,IAAgBtL,QAAQ,SAAClB,GACrBA,EAAMyN,kDAnLV,OAAOlB,GAAAlS,KAAAmS,IAAgBpS,sCAwDvB,OAAOC,KAAK2L,UAAU5L,mnBC9JRsT,gKAEN,oCACG,mCACL,oCACG,8DAGT,MACI,aACArT,KAAKkK,SACL,iBACAlK,KAAKoK,YACL,aAEApK,KAAKqK,OACL,eACArK,KAAKuK,yCAgCNL,EAAUE,EAAaC,EAAQE,GAClC+I,GAAAtT,KAAAuT,GAAiBrJ,GACjBoJ,GAAAtT,KAAAwT,GAAoBpJ,GACpBkJ,GAAAtT,KAAAyT,GAAepJ,GACfiJ,GAAAtT,KAAA0T,GAAkBnJ,mCAIlB+I,GAAAtT,KAAAwT,GAAAF,GAAoBtT,KAApB0T,GAAsC,IACtCJ,GAAAtT,KAAAuT,GAAAD,GAAiBtT,KAAjByT,GAAgC,oCAhChC,OAAOlT,KAAKoT,IAAI3T,KAAKoK,YAAcpK,KAAKuK,yCAQxC,OAAOrL,QAAMV,OAAOwB,KAAKoK,YAAapK,KAAKD,4CAG5B,OAAA6T,GAAO5T,KAAPwT,qCACF,OAAAI,GAAO5T,KAAPuT,sCACA,OAAAK,GAAO5T,KAAP0T,mCACF,OAAAE,GAAO5T,KAAPyT,6tCC7BnB,IAAI7T,GAAU,GAEOiU,oWAEV9P,EAAa,qCACTkO,GAAQzT,2CACN,IAAI6U,sCACL,oCAEH,gQAP+BS,4DAuOpC,OAAIlU,GAAQG,OAAS,EACVH,GAAQgB,MAEZ,IAAIiT,kCAOA1L,GACRA,aAAmB0L,IAClB1L,EAAQtF,UACRjD,GAAQM,KAAKiI,8CAtO0B,IAApC/B,EAAoC5B,UAAAzE,OAAA,QAAAyC,IAAAgC,UAAA,GAAAA,UAAA,QAA7BhC,EAAWzC,EAAkByE,UAAAzE,OAAA,QAAAyC,IAAAgC,UAAA,GAAAA,UAAA,QAAXhC,EAC1BmG,EAAYoL,GAAA/T,KAAHgU,IACT5M,EAAU2M,GAAA/T,KAAHiU,IAQb,GAPA7N,EAAShG,OAAOgG,GAChBrG,EAASK,OAAOL,IACbM,MAAM+F,IAAW/F,MAAMN,MACtBqG,EAASuC,EAAUyB,YACnBrK,EAAS4I,EAAU5I,QAGX,IAATA,GAIqB,IAArBqH,EAAQwB,WAAX,CAIA,IAAMgD,EAAW1M,QAAMV,OAAO4H,EAAQrG,GAGtC,GAAqB,IAAlB6L,EAAS7L,OAAW,CACnB,IAAM4F,EAAQyB,EAAQkI,iBAAiB1D,GAAU,GACjD,GAAGjG,GAAwB,IAAfA,EAAM5F,QAAc4F,EAAMC,OAAOJ,EAAU6L,MAGnD,OAFA1L,EAAMC,KAAOJ,EAAU6L,WACvBrR,KAAKkU,WAKb,IAAMC,EAAc/M,EAAQkI,iBAAiB1D,GAAU,GAEvD,GADAxE,EAAQ+I,kBAAkBvE,GACvBuI,EAAY,CAEX,IAAM/J,EAAcwB,EAAS9L,MACvBoK,EAAWiK,EAAY1V,IAC7BkK,EAAU6B,OAAON,EAAUE,EAAaF,EAAUE,GAEtDpK,KAAKkU,SAASC,iCAOb/N,GACD,IAAMuC,EAAYoL,GAAA/T,KAAHgU,IACT5M,EAAU2M,GAAA/T,KAAHiU,IAEb,GAA0B,IAAvB7M,EAAQwB,WAAiB,CACxBxB,EAAQgN,gBAAgB,IACxBhN,EAAQgN,gBAAgB,IACxB,IAAMC,EAAcjN,EAAQG,eAAe,GAE3CoB,EAAU6B,OAAO6J,EAAY5V,IAAK,EAAG4V,EAAY5V,IAAK,OAEtD,CACA,IAAM4Q,EAAWjI,EAAQkN,iBAAiBlO,GAC1C,IAAIiJ,EAAU,OAEd,IAAMvF,EAAc1C,EAAQ2C,cAAcsF,EAAS5Q,KAC7CmT,EAAWvC,EAASkF,MAAM5L,EAAUyB,YAAcN,EAAWhK,OAE7D0B,EAAM4F,EAAQoN,cAAcnF,EAAS5Q,KAC3C2I,EAAQqN,YAAY7C,EAAUpQ,EAAI,GAGlC,IAAM4I,EAAczB,EAAUyB,YAAY,EACpCF,EAAW0H,EAASnT,IAC1BkK,EAAU6B,OAAON,EAAUE,EAAaF,EAAUE,GAEtDpK,KAAKkU,UAAS,sCAQP7N,EAAMD,GAAO,IAEhBiJ,EADG1G,EAAqB3I,KAArB2I,UAAUvB,EAAWpH,KAAXoH,QAEjB,GAA2B,IAAvBA,EAAQwB,WACRyG,EAAWjI,EAAQgN,gBAAgB/N,OAChC,CAEH,GAAiB,QADjBgJ,EAAWjI,EAAQkN,iBAAiBlO,IACb,OAEvB,IAAM0D,EAAa1C,EAAQ2C,cAAcsF,EAAS5Q,KAC5CiW,EAActO,EAAS0D,EAAWhK,MACxCuP,EAASgB,WAAWhK,EAAMqO,GAE1BxV,QAAM2D,QAAQiH,GAIlB,IAAMM,EAAchE,EAASC,EAAKtG,OAC5BmK,EAAWmF,EAAS5Q,IAC1BkK,EAAU6B,OAAON,EAAUE,EAAaF,EAAUE,GAElDpK,KAAKkU,UAAS,wCASL3P,GAAuC,IAAhC6B,EAAgC5B,UAAAzE,OAAA,QAAAyC,IAAAgC,UAAA,GAAAA,UAAA,GAAvB,EAAGzE,EAAoByE,UAAAzE,OAAA,QAAAyC,IAAAgC,UAAA,GAAAA,UAAA,QAAXhC,EACrCuR,GAAA/T,KAAAiU,IAAcU,aAAapQ,EAAO6B,EAAQrG,GAC1CC,KAAKkU,iDAQKzV,EAAK8F,GACfwP,GAAA/T,KAAAiU,IAAcW,cAAcnW,EAAK8F,GACjCvE,KAAKkU,gDAQIzV,EAAKmH,GACdmO,GAAA/T,KAAAiU,IAAcY,aAAapW,EAAKmH,GAChC5F,KAAKkU,oDAQL,OAAOH,GAAA/T,KAAAiU,IAAcK,iBAAiBP,GAAA/T,KAAAgU,IAAgB5J,kDAQtD2J,GAAA/T,KAAAiU,IAAcb,aACdpT,KAAKkU,6CAILjC,GAAQpP,QAARkR,GAAgB/T,KAAhBiU,KACAa,GAAA9U,KAAAgU,GAAkB,MAClBc,GAAA9U,KAAA+U,IAAiB,GACjBD,GAAA9U,KAAAgV,GAAc,yCAqDS,IAAlBlI,EAAkBtI,UAAAzE,OAAA,QAAAyC,IAAAgC,UAAA,IAAAA,UAAA,GACvBxE,KAAKiV,cAAcpR,QAAMrF,OAAOoF,EAAgBA,EAAe2I,OAAQ,CAACO,6CA9CxE,OAAOiH,GAAA/T,KAAAiU,IAActI,wBAOhBxN,GACL4V,GAAA/T,KAAAgU,IAAgBnL,QAChBoJ,GAAQpP,QAARkR,GAAgB/T,KAAhBiU,KACAa,GAAA9U,KAAAiU,GAAgBhC,GAAQzT,UACxBuV,GAAA/T,KAAAiU,IAAcG,gBAAgBjW,GAC9B6B,KAAKkU,0CARL,OAAOH,GAAA/T,KAAAiU,IAAclU,mCAYrB,OAAAgU,GAAO/T,KAAPkV,oCAIA,OAAAnB,GAAO/T,KAAPiU,sCAIA,OAAAF,GAAO/T,KAAPgU,qCAIA,OAAAD,GAAO/T,KAAP+U,kBAGS5W,GACT2W,GAAA9U,KAAA+U,GAAiB5W,GACjB6B,KAAKkU,yCAIL,OAAAH,GAAO/T,KAAPgV,kBAGM7W,GACN2W,GAAA9U,KAAAgV,GAAc7W,GACd6B,KAAKkU,yVC1OPiB,yCACY,kBAGZC,yCACY,gBADZA,UAEY,CAACC,UAAU,YAFvBD,WAGa,CAACC,UAAU,aAHxBD,YAIc,CAACC,UAAU,cAJzBD,aAKe,CAACC,UAAU,eAL1BD,aAMe,CAACC,UAAU,gBAM1BC,yCACY,qBADZA,cAOgB,CAACC,eAAe,gBAPhCD,kBAYoB,CAACC,eAAe,oBAZpCD,eAiBiB,CAACC,eAAe,iBAjBjCD,UAsBY,CAACC,eAAe,YAtB5BD,WA2Ba,CAACC,eAAe,aA3B7BD,aAgCe,CAACC,eAAe,gBAO/BC,yCACY,iBADZA,YAOc,CAACC,WAAa,cAP5BD,UAaY,CAACC,WAAa,YAb1BD,YAkBc,CAACC,WAAa,cAlB5BD,aAuBe,CAACC,WAAY,gBAM5BC,yCACY,gBADZA,YAOc,CAACC,UAAY,cAP3BD,YAac,CAACC,UAAY,cAb3BD,aAmBe,CAACC,UAAY,eAnB5BD,aAyBe,CAACC,UAAY,gBAM5BC,yCACY,eADZA,cAGgB,CAACC,SAAW,gBAH5BD,aAIe,CAACC,SAAW,eAJ3BD,WAKa,CAACC,SAAW,aALzBD,YAMc,CAACC,SAAW,cAN1BD,WAOa,CAACC,SAAW,aAPzBD,aAQe,CAACC,SAAW,eAR3BD,cASgB,CAACC,SAAW,gBAT5BD,aAee,CAACC,SAAW,eAf3BD,YAqBc,CAACC,SAAW,cArB1BD,YA2Bc,CAACC,SAAW,cA3B1BD,aAiCe,CAACC,SAAW,gBAG3BC,yCACY,iBADZA,YAQc,CAACC,WAAW,cAR1BD,YAac,CAACC,WAAW,cAb1BD,oBAkBuB,CAACC,WAAW,uBAlBnCD,uBAuByB,CAACC,WAAW,0BAvBrCD,WA4Ba,CAACC,WAAW,aA5BzBD,aAiCe,CAACC,WAAW,eAjC3BD,cAsCgB,CAACC,WAAW,gBAtC5BD,gBA6CkB,CAACC,WAAW,mBA7C9BD,aAkDe,CAACC,WAAW,eAlD3BD,aAuDe,CAACC,WAAW,eAvD3BD,YA4Dc,CAACC,WAAW,cA5D1BD,gBAiEkB,CAACC,WAAW,kBAjE9BD,iBAsEmB,CAACC,WAAW,mBAtE/BD,YA2Ec,CAACC,WAAW,cA3E1BD,cAgFgB,CAACC,WAAW,gBAhF5BD,YAqFc,CAACC,WAAW,cArF1BD,eA0FiB,CAACC,WAAW,iBA1F7BD,oBA+FuB,CAACC,WAAW,wBA/FnCD,kBAoGoB,CAACC,WAAW,qBApGhCD,gBAyGkB,CAACC,WAAW,mBAzG9BD,iBA8GmB,CAACC,WAAW,oBA9G/BD,cAmHgB,CAACC,WAAW,iBAnH5BD,cAwHgB,CAACC,WAAW,iBAxH5BD,cA6HgB,CAACC,WAAW,iBA7H5BD,eAkIiB,CAACC,WAAW,kBAlI7BD,YAuIc,CAACC,WAAW,eAvI1BD,cA4IgB,CAACC,WAAW,kBAG5BC,yCACY,YADZA,aAOe,CAAEC,MAAQ,eAPzBD,eAQiB,CAAEC,MAAQ,iBAR3BD,kBASoB,CAAEC,MAAQ,oBAT9BD,UAUY,CAAEC,MAAQ,YAVtBD,gBAWkB,CAAEC,MAAQ,kBAX5BD,WAYa,CAAEC,MAAQ,aAZvBD,WAaa,CAAEC,MAAQ,aAbvBD,YAcc,CAAEC,MAAQ,cAdxBD,WAea,CAAEC,MAAQ,aAfvBD,oBAgBsB,CAAEC,MAAQ,sBAhBhCD,UAiBY,CAAEC,MAAQ,YAjBtBD,gBAkBkB,CAAEC,MAAQ,kBAlB5BD,WAmBa,CAAEC,MAAQ,aAnBvBD,eAoBiB,CAAEC,MAAQ,iBApB3BD,eAqBiB,CAAEC,MAAQ,iBArB3BD,gBAsBkB,CAAEC,MAAQ,kBAtB5BD,eAuBiB,CAAEC,MAAQ,iBAvB3BD,WAwBa,CAAEC,MAAQ,aAxBvBD,oBAyBsB,CAAEC,MAAQ,sBAzBhCD,cA0BgB,CAAEC,MAAQ,gBA1B1BD,aA2Be,CAAEC,MAAQ,eA3BzBD,UA4BY,CAAEC,MAAQ,YA5BtBD,cA6BgB,CAAEC,MAAQ,gBA7B1BD,cA8BgB,CAAEC,MAAQ,gBA9B1BD,mBA+BqB,CAAEC,MAAQ,qBA/B/BD,cAgCgB,CAAEC,MAAQ,gBAhC1BD,eAiCiB,CAAEC,MAAQ,iBAjC3BD,eAkCiB,CAAEC,MAAQ,iBAlC3BD,iBAmCmB,CAAEC,MAAQ,mBAnC7BD,oBAoCsB,CAAEC,MAAQ,sBApChCD,gBAqCkB,CAAEC,MAAQ,kBArC5BD,gBAsCkB,CAAEC,MAAQ,kBAtC5BD,aAuCe,CAAEC,MAAQ,eAvCzBD,gBAwCkB,CAAEC,MAAQ,kBAxC5BD,kBAyCoB,CAAEC,MAAQ,oBAzC9BD,mBA0CqB,CAAEC,MAAQ,qBA1C/BD,mBA2CqB,CAAEC,MAAQ,qBA3C/BD,mBA4CqB,CAAEC,MAAQ,qBA5C/BD,gBA6CkB,CAAEC,MAAQ,kBA7C5BD,cA8CgB,CAAEC,MAAQ,gBA9C1BD,iBA+CmB,CAAEC,MAAQ,mBA/C7BD,aAgDe,CAAEC,MAAQ,eAhDzBD,gBAiDkB,CAAEC,MAAQ,kBAjD5BD,cAkDgB,CAAEC,MAAQ,gBAlD1BD,eAmDiB,CAAEC,MAAQ,iBAnD3BD,iBAoDmB,CAAEC,MAAQ,mBApD7BD,iBAqDmB,CAAEC,MAAQ,mBArD7BD,aAsDe,CAAEC,MAAQ,eAtDzBD,eAuDiB,CAAEC,MAAQ,iBAvD3BD,gBAwDkB,CAAEC,MAAQ,kBAxD5BD,UAyDY,CAAEC,MAAQ,YAzDtBD,eA0DiB,CAAEC,MAAQ,iBA1D3BD,UA2DY,CAAEC,MAAQ,YA3DtBD,WA4Da,CAAEC,MAAQ,aA5DvBD,iBA6DmB,CAAEC,MAAQ,mBA7D7BD,cA8DgB,CAAEC,MAAQ,gBA9D1BD,aA+De,CAAEC,MAAQ,eA/DzBD,eAgEiB,CAAEC,MAAQ,iBAhE3BD,YAiEc,CAAEC,MAAQ,cAjExBD,WAkEa,CAAEC,MAAQ,aAlEvBD,WAmEa,CAAEC,MAAQ,aAnEvBD,cAoEgB,CAAEC,MAAQ,gBApE1BD,mBAqEqB,CAAEC,MAAQ,qBArE/BD,eAsEiB,CAAEC,MAAQ,iBAtE3BD,kBAuEoB,CAAEC,MAAQ,oBAvE9BD,eAwEiB,CAAEC,MAAQ,iBAxE3BD,gBAyEkB,CAAEC,MAAQ,kBAzE5BD,eA0EiB,CAAEC,MAAQ,iBA1E3BD,0BA2E4B,CAAEC,MAAQ,4BA3EtCD,eA4EiB,CAAEC,MAAQ,iBA5E3BD,gBA6EkB,CAAEC,MAAQ,kBA7E5BD,eA8EiB,CAAEC,MAAQ,iBA9E3BD,iBA+EmB,CAAEC,MAAQ,mBA/E7BD,mBAgFqB,CAAEC,MAAQ,qBAhF/BD,kBAiFoB,CAAEC,MAAQ,oBAjF9BD,oBAkFsB,CAAEC,MAAQ,sBAlFhCD,oBAmFsB,CAAEC,MAAQ,sBAnFhCD,oBAoFsB,CAAEC,MAAQ,sBApFhCD,iBAqFmB,CAAEC,MAAQ,mBArF7BD,UAsFY,CAAEC,MAAQ,YAtFtBD,eAuFiB,CAAEC,MAAQ,iBAvF3BD,WAwFa,CAAEC,MAAQ,aAxFvBD,aAyFe,CAAEC,MAAQ,eAzFzBD,YA0Fc,CAAEC,MAAQ,cA1FxBD,sBA2FwB,CAAEC,MAAQ,wBA3FlCD,gBA4FkB,CAAEC,MAAQ,kBA5F5BD,kBA6FoB,CAAEC,MAAQ,oBA7F9BD,kBA8FoB,CAAEC,MAAQ,oBA9F9BD,oBA+FsB,CAAEC,MAAQ,sBA/FhCD,qBAgGuB,CAAEC,MAAQ,uBAhGjCD,uBAiGyB,CAAEC,MAAQ,yBAjGnCD,qBAkGuB,CAAEC,MAAQ,uBAlGjCD,qBAmGuB,CAAEC,MAAQ,uBAnGjCD,kBAoGoB,CAAEC,MAAQ,oBApG9BD,eAqGiB,CAAEC,MAAQ,iBArG3BD,eAsGiB,CAAEC,MAAQ,iBAtG3BD,cAuGgB,CAAEC,MAAQ,gBAvG1BD,iBAwGmB,CAAEC,MAAQ,mBAxG7BD,UAyGY,CAAEC,MAAQ,YAzGtBD,aA0Ge,CAAEC,MAAQ,eA1GzBD,WA2Ga,CAAEC,MAAQ,aA3GvBD,eA4GiB,CAAEC,MAAQ,iBA5G3BD,YA6Gc,CAAEC,MAAQ,cA7GxBD,eA8GiB,CAAEC,MAAQ,iBA9G3BD,YA+Gc,CAAEC,MAAQ,cA/GxBD,mBAgHqB,CAAEC,MAAQ,qBAhH/BD,eAiHiB,CAAEC,MAAQ,iBAjH3BD,mBAkHqB,CAAEC,MAAQ,qBAlH/BD,mBAmHqB,CAAEC,MAAQ,qBAnH/BD,gBAoHkB,CAAEC,MAAQ,kBApH5BD,eAqHiB,CAAEC,MAAQ,iBArH3BD,UAsHY,CAAEC,MAAQ,YAtHtBD,UAuHY,CAAEC,MAAQ,YAvHtBD,UAwHY,CAAEC,MAAQ,YAxHtBD,gBAyHkB,CAAEC,MAAQ,kBAzH5BD,YA0Hc,CAAEC,MAAQ,cA1HxBD,SA2HW,CAAEC,MAAQ,WA3HrBD,eA4HiB,CAAEC,MAAQ,iBA5H3BD,eA6HiB,CAAEC,MAAQ,iBA7H3BD,iBA8HmB,CAAEC,MAAQ,mBA9H7BD,YA+Hc,CAAEC,MAAQ,cA/HxBD,gBAgIkB,CAAEC,MAAQ,kBAhI5BD,cAiIgB,CAAEC,MAAQ,gBAjI1BD,cAkIgB,CAAEC,MAAQ,gBAlI1BD,YAmIc,CAAEC,MAAQ,cAnIxBD,YAoIc,CAAEC,MAAQ,cApIxBD,aAqIe,CAAEC,MAAQ,eArIzBD,eAsIiB,CAAEC,MAAQ,iBAtI3BD,eAuIiB,CAAEC,MAAQ,iBAvI3BD,UAwIY,CAAEC,MAAQ,YAxItBD,iBAyImB,CAAEC,MAAQ,mBAzI7BD,eA0IiB,CAAEC,MAAQ,iBA1I3BD,SA2IW,CAAEC,MAAQ,WA3IrBD,UA4IY,CAAEC,MAAQ,YA5ItBD,aA6Ie,CAAEC,MAAQ,eA7IzBD,YA8Ic,CAAEC,MAAQ,cA9IxBD,eA+IiB,CAAEC,MAAQ,iBA/I3BD,YAgJc,CAAEC,MAAQ,cAhJxBD,eAiJiB,CAAEC,MAAQ,iBAjJ3BD,WAkJa,CAAEC,MAAQ,aAlJvBD,WAmJa,CAAEC,MAAQ,aAnJvBD,gBAoJkB,CAAEC,MAAQ,kBApJ5BD,YAqJc,CAAEC,MAAQ,cArJxBD,iBAsJmB,CAAEC,MAAQ,oBAG7BC,yCACY,sBADZA,aAGe,CAAEC,gBAAkB,eAHnCD,eAIiB,CAAEC,gBAAkB,iBAJrCD,kBAKoB,CAAEC,gBAAkB,oBALxCD,UAMY,CAAEC,gBAAkB,YANhCD,gBAOkB,CAAEC,gBAAkB,kBAPtCD,WAQa,CAAEC,gBAAkB,aARjCD,WASa,CAAEC,gBAAkB,aATjCD,YAUc,CAAEC,gBAAkB,cAVlCD,WAWa,CAAEC,gBAAkB,aAXjCD,oBAYsB,CAAEC,gBAAkB,sBAZ1CD,UAaY,CAAEC,gBAAkB,YAbhCD,gBAckB,CAAEC,gBAAkB,kBAdtCD,WAea,CAAEC,gBAAkB,aAfjCD,eAgBiB,CAAEC,gBAAkB,iBAhBrCD,eAiBiB,CAAEC,gBAAkB,iBAjBrCD,gBAkBkB,CAAEC,gBAAkB,kBAlBtCD,eAmBiB,CAAEC,gBAAkB,iBAnBrCD,WAoBa,CAAEC,gBAAkB,aApBjCD,oBAqBsB,CAAEC,gBAAkB,sBArB1CD,cAsBgB,CAAEC,gBAAkB,gBAtBpCD,aAuBe,CAAEC,gBAAkB,eAvBnCD,UAwBY,CAAEC,gBAAkB,YAxBhCD,cAyBgB,CAAEC,gBAAkB,gBAzBpCD,cA0BgB,CAAEC,gBAAkB,gBA1BpCD,mBA2BqB,CAAEC,gBAAkB,qBA3BzCD,cA4BgB,CAAEC,gBAAkB,gBA5BpCD,eA6BiB,CAAEC,gBAAkB,iBA7BrCD,eA8BiB,CAAEC,gBAAkB,iBA9BrCD,iBA+BmB,CAAEC,gBAAkB,mBA/BvCD,oBAgCsB,CAAEC,gBAAkB,sBAhC1CD,gBAiCkB,CAAEC,gBAAkB,kBAjCtCD,gBAkCkB,CAAEC,gBAAkB,kBAlCtCD,aAmCe,CAAEC,gBAAkB,eAnCnCD,gBAoCkB,CAAEC,gBAAkB,kBApCtCD,kBAqCoB,CAAEC,gBAAkB,oBArCxCD,mBAsCqB,CAAEC,gBAAkB,qBAtCzCD,mBAuCqB,CAAEC,gBAAkB,qBAvCzCD,mBAwCqB,CAAEC,gBAAkB,qBAxCzCD,gBAyCkB,CAAEC,gBAAkB,kBAzCtCD,cA0CgB,CAAEC,gBAAkB,gBA1CpCD,iBA2CmB,CAAEC,gBAAkB,mBA3CvCD,aA4Ce,CAAEC,gBAAkB,eA5CnCD,gBA6CkB,CAAEC,gBAAkB,kBA7CtCD,cA8CgB,CAAEC,gBAAkB,gBA9CpCD,eA+CiB,CAAEC,gBAAkB,iBA/CrCD,iBAgDmB,CAAEC,gBAAkB,mBAhDvCD,iBAiDmB,CAAEC,gBAAkB,mBAjDvCD,aAkDe,CAAEC,gBAAkB,eAlDnCD,eAmDiB,CAAEC,gBAAkB,iBAnDrCD,gBAoDkB,CAAEC,gBAAkB,kBApDtCD,UAqDY,CAAEC,gBAAkB,YArDhCD,eAsDiB,CAAEC,gBAAkB,iBAtDrCD,UAuDY,CAAEC,gBAAkB,YAvDhCD,WAwDa,CAAEC,gBAAkB,aAxDjCD,iBAyDmB,CAAEC,gBAAkB,mBAzDvCD,cA0DgB,CAAEC,gBAAkB,gBA1DpCD,aA2De,CAAEC,gBAAkB,eA3DnCD,eA4DiB,CAAEC,gBAAkB,iBA5DrCD,YA6Dc,CAAEC,gBAAkB,cA7DlCD,WA8Da,CAAEC,gBAAkB,aA9DjCD,WA+Da,CAAEC,gBAAkB,aA/DjCD,cAgEgB,CAAEC,gBAAkB,gBAhEpCD,mBAiEqB,CAAEC,gBAAkB,qBAjEzCD,eAkEiB,CAAEC,gBAAkB,iBAlErCD,kBAmEoB,CAAEC,gBAAkB,oBAnExCD,eAoEiB,CAAEC,gBAAkB,iBApErCD,gBAqEkB,CAAEC,gBAAkB,kBArEtCD,eAsEiB,CAAEC,gBAAkB,iBAtErCD,0BAuE4B,CAAEC,gBAAkB,4BAvEhDD,eAwEiB,CAAEC,gBAAkB,iBAxErCD,gBAyEkB,CAAEC,gBAAkB,kBAzEtCD,eA0EiB,CAAEC,gBAAkB,iBA1ErCD,iBA2EmB,CAAEC,gBAAkB,mBA3EvCD,mBA4EqB,CAAEC,gBAAkB,qBA5EzCD,kBA6EoB,CAAEC,gBAAkB,oBA7ExCD,oBA8EsB,CAAEC,gBAAkB,sBA9E1CD,oBA+EsB,CAAEC,gBAAkB,sBA/E1CD,oBAgFsB,CAAEC,gBAAkB,sBAhF1CD,iBAiFmB,CAAEC,gBAAkB,mBAjFvCD,UAkFY,CAAEC,gBAAkB,YAlFhCD,eAmFiB,CAAEC,gBAAkB,iBAnFrCD,WAoFa,CAAEC,gBAAkB,aApFjCD,aAqFe,CAAEC,gBAAkB,eArFnCD,YAsFc,CAAEC,gBAAkB,cAtFlCD,sBAuFwB,CAAEC,gBAAkB,wBAvF5CD,gBAwFkB,CAAEC,gBAAkB,kBAxFtCD,kBAyFoB,CAAEC,gBAAkB,oBAzFxCD,kBA0FoB,CAAEC,gBAAkB,oBA1FxCD,oBA2FsB,CAAEC,gBAAkB,sBA3F1CD,qBA4FuB,CAAEC,gBAAkB,uBA5F3CD,uBA6FyB,CAAEC,gBAAkB,yBA7F7CD,qBA8FuB,CAAEC,gBAAkB,uBA9F3CD,qBA+FuB,CAAEC,gBAAkB,uBA/F3CD,kBAgGoB,CAAEC,gBAAkB,oBAhGxCD,eAiGiB,CAAEC,gBAAkB,iBAjGrCD,eAkGiB,CAAEC,gBAAkB,iBAlGrCD,cAmGgB,CAAEC,gBAAkB,gBAnGpCD,iBAoGmB,CAAEC,gBAAkB,mBApGvCD,UAqGY,CAAEC,gBAAkB,YArGhCD,aAsGe,CAAEC,gBAAkB,eAtGnCD,WAuGa,CAAEC,gBAAkB,aAvGjCD,eAwGiB,CAAEC,gBAAkB,iBAxGrCD,YAyGc,CAAEC,gBAAkB,cAzGlCD,eA0GiB,CAAEC,gBAAkB,iBA1GrCD,YA2Gc,CAAEC,gBAAkB,cA3GlCD,mBA4GqB,CAAEC,gBAAkB,qBA5GzCD,eA6GiB,CAAEC,gBAAkB,iBA7GrCD,mBA8GqB,CAAEC,gBAAkB,qBA9GzCD,mBA+GqB,CAAEC,gBAAkB,qBA/GzCD,gBAgHkB,CAAEC,gBAAkB,kBAhHtCD,eAiHiB,CAAEC,gBAAkB,iBAjHrCD,UAkHY,CAAEC,gBAAkB,YAlHhCD,UAmHY,CAAEC,gBAAkB,YAnHhCD,UAoHY,CAAEC,gBAAkB,YApHhCD,gBAqHkB,CAAEC,gBAAkB,kBArHtCD,YAsHc,CAAEC,gBAAkB,cAtHlCD,SAuHW,CAAEC,gBAAkB,WAvH/BD,eAwHiB,CAAEC,gBAAkB,iBAxHrCD,eAyHiB,CAAEC,gBAAkB,iBAzHrCD,iBA0HmB,CAAEC,gBAAkB,mBA1HvCD,YA2Hc,CAAEC,gBAAkB,cA3HlCD,gBA4HkB,CAAEC,gBAAkB,kBA5HtCD,cA6HgB,CAAEC,gBAAkB,gBA7HpCD,cA8HgB,CAAEC,gBAAkB,gBA9HpCD,YA+Hc,CAAEC,gBAAkB,cA/HlCD,YAgIc,CAAEC,gBAAkB,cAhIlCD,aAiIe,CAAEC,gBAAkB,eAjInCD,eAkIiB,CAAEC,gBAAkB,iBAlIrCD,eAmIiB,CAAEC,gBAAkB,iBAnIrCD,UAoIY,CAAEC,gBAAkB,YApIhCD,iBAqImB,CAAEC,gBAAkB,mBArIvCD,eAsIiB,CAAEC,gBAAkB,iBAtIrCD,SAuIW,CAAEC,gBAAkB,WAvI/BD,UAwIY,CAAEC,gBAAkB,YAxIhCD,aAyIe,CAAEC,gBAAkB,eAzInCD,YA0Ic,CAAEC,gBAAkB,cA1IlCD,eA2IiB,CAAEC,gBAAkB,iBA3IrCD,YA4Ic,CAAEC,gBAAkB,cA5IlCD,eA6IiB,CAAEC,gBAAkB,iBA7IrCD,WA8Ia,CAAEC,gBAAkB,aA9IjCD,WA+Ia,CAAEC,gBAAkB,aA/IjCD,gBAgJkB,CAAEC,gBAAkB,kBAhJtCD,YAiJc,CAAEC,gBAAkB,cAjJlCD,iBAkJmB,CAAEC,gBAAkB,gBCjlB7CrZ,EAAAU,EAAA4Y,EAAA,8BAAAC,KAAAvZ,EAAAU,EAAA4Y,EAAA,0BAAAE,KAAAxZ,EAAAU,EAAA4Y,EAAA,8BAAA5Q,IAAA1I,EAAAU,EAAA4Y,EAAA,4BAAAG,KAAAzZ,EAAAU,EAAA4Y,EAAA,mCAAAI,KAAA1Z,EAAAU,EAAA4Y,EAAA,mCAAAK,KAAA3Z,EAAAU,EAAA4Y,EAAA,kCAAAM,IAAA5Z,EAAAU,EAAA4Y,EAAA,8BAAAO","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 11);\n","const Range = require(\"./lib/IntRange\");\nconst range = require(\"./lib/range\");\nconst rangeAdd = require(\"./lib/rangeAdd\");\nconst rangeCut = require(\"./lib/rangeCut\");\nconst rangeIntersect = require(\"./lib/rangeIntersect\");\nconst rangeSub = require(\"./lib/rangeSub\");\n\nmodule.exports = {\n    Range,\n    range,\n    rangeAdd,\n    rangeCut,\n    rangeIntersect,\n    rangeSub\n};","module.exports = require(\"react\");","const $begin = Symbol('begin');\nconst $length = Symbol('length');\nlet poolSize = 100;\nlet objPool = [];\n\nclass Range {\n    /**\n     *\n     * @param {number} begin\n     * @param {number} length\n     */\n    constructor(begin = 0, length = 1) {\n        this.begin = begin;\n        this.length = length;\n    }\n\n    /**\n     * Range to Array\n     * @returns {Array}\n     */\n    toArray() {\n        let arr = [];\n        for (let i = 0; i < this.length; i++) {\n            arr.push(this.begin+i);\n        }\n        return arr;\n    }\n\n    /**\n     *\n     * @returns {Array | number}\n     */\n    toRaw() {\n        if(this.length>0){\n            return this.toArray();\n        }\n        return this.begin;\n    }\n\n    clone() {\n        return new Range(this.begin, this.length);\n    }\n\n    get begin() {\n        return this[$begin];\n    }\n\n    set begin(value) {\n        value = Number(value);\n        if(isNaN(value) || value===Infinity || value===-Infinity){\n            this[$begin] = 0;\n        }else{\n            this[$begin] = Math.round(value);\n        }\n    }\n\n    get length() {\n        return this[$length];\n    }\n\n    set length(value) {\n        value = Number(value);\n        if(isNaN(value) || value===Infinity || value===-Infinity){\n            this[$length] = 0;\n        }else{\n            this[$length] = Math.max(0, Math.round(value));\n\n        }\n    }\n\n    get min() {\n        return this.begin;\n    }\n\n    set min(value) {\n        if(this.min===Math.round(Number(value)))return;\n        let _max = this.max;\n        this.begin = value;\n        this.length = _max - value + 1;\n    }\n\n    get max() {\n        if(this.length===0){\n            return this.begin;\n        }\n        return this.begin + this.length - 1;\n    }\n\n    set max(value) {\n        if(this.max===Math.round(Number(value)))return;\n        this.length = Math.max(0, value - this.min + 1);\n    }\n\n    /**\n     * 判断对象是否包含 range\n     * @param range\n     * @returns {boolean}\n     */\n    isContains(range) {\n        return this.min <= range.min && this.max >= range.max && this.length >= range.length;\n    }\n\n    /**\n     * 判断对象是否与 range 相交\n     * @param range\n     * @returns {boolean}\n     */\n    isIntersect(range) {\n        return (this.min >= range.min && this.min <= range.max)\n            || (this.max >= range.min && this.max <= range.max)\n            || (range.min >= this.min && range.min <= this.max)\n            || (range.max >= this.min && range.max <= this.max);\n    }\n\n    /**\n     *\n     * @param value\n     * @returns {boolean}\n     */\n    has(value) {\n        return value >= this.min && value <= this.max;\n    }\n\n    /**\n     *\n     * @param range\n     * @returns {boolean}\n     */\n    equal(range) {\n        return this.begin===range.begin && this.length===range.length;\n    }\n\n    toString() {\n        return `{min:${this.min}, max:${this.max}, length:${this.length}}`\n    }\n\n    static create(begin=0, length=1) {\n        if(objPool.length>0){\n            const range = objPool.pop();\n            range.begin = begin;\n            range.length = length;\n            return range;\n        }\n        return new Range(begin, length);\n    }\n\n    static release(range){\n        if(range instanceof Range){\n\n            range.begin = 0;\n            range.length = 0;\n\n            if(objPool.length+1 <= poolSize){\n                objPool.push(range);\n            }\n        }\n    }\n}\n\nmodule.exports = Range;","module.exports = require(\"prop-types\");","module.exports = require(\"easy-event\");","const Range = require(\"./IntRange\");\n\n/**\n * range(1,5) - range(3,7) = [range(1,2)]\n * range(1,5) - range(3,7) - range(1,2) = []\n * @param {Range} args\n * @returns {Array.<Range>}\n */\nlet rangeSub = (...args)=>{\n    if(args.length===0){\n        return [];\n    }\n    let rawList = [args.shift().toRaw()];\n    args.sort((a,b)=>{\n        return a.begin - b.begin;\n    });\n    while (args.length>0){\n        let arg = args.shift().toRaw();\n        for (let i = 0; i < rawList.length; i++) {\n            const raw = rawList[i];\n            if((typeof raw) === 'number' && (typeof arg) === 'number'){\n                if(raw === arg){\n                    return [];\n                }\n            }\n            else if((typeof raw) === 'number' && arg instanceof Array){\n                if(arg.indexOf(raw) !== -1){\n                    return [];\n                }\n            }\n            else if(raw instanceof Array && (typeof arg) === 'number'){\n                const idx = raw.indexOf(arg);\n                if(idx !== -1 && idx !== 0){\n                    const rightArr = raw.slice(idx);\n                    rawList[i] = raw.slice(0, idx);\n                    rawList.splice(i+1, 0, rightArr);\n                    break;\n                }\n            }\n            else if(raw instanceof Array && arg instanceof Array){\n                // 找相同的最小值\n                const r1Min = raw[0];\n                const r1Max = raw[raw.length-1];\n                const r2Min = arg[0];\n                const r2Max = arg[arg.length-1];\n                let min = null;\n                if (r1Min < r2Min) {\n                    if (r1Max >= r2Min) {\n                        min = r2Min;\n                    }\n                } else if (r1Min >= r2Min && r1Min <= r2Max) {\n                    min = Math.max(r1Min, r2Min);\n                }\n                if(min === null){\n                    continue;\n                }\n\n                const idx = raw.indexOf(min);\n                const idx2 = arg.indexOf(min);\n                arg = arg.slice(idx2);\n\n                const delLen = Math.min(raw.length-idx, arg.length);\n                if(idx+delLen < raw.length && idx !== 0){  //切割情况\n                    const rightArr = raw.slice(idx+delLen);\n                    rawList[i] = raw.slice(0, idx);\n                    rawList.splice(i+1, 0, rightArr);\n                    break;\n                }\n                else{\n                    raw.splice(idx, delLen);\n                    arg.splice(0, delLen);\n                    if(arg.length===0){\n                        break;\n                    }\n                }\n            }\n        }\n    }\n\n    // 剔除空数组\n    rawList = rawList.filter((value)=>{\n        if( (value instanceof Array) && value.length>0){\n            return true;\n        }\n        else return typeof value === 'number';\n    });\n\n    // 解析 raw\n    const result = [];\n    for (let i = 0; i < rawList.length; i++) {\n        const item = rawList[i];\n        if(item instanceof Array){\n            result.push(Range.create(item[0], item.length));\n        }\n        else if(typeof item === 'number'){\n            result.push(Range.create(item, 0));\n        }\n    }\n\n    return result;\n};\n\nmodule.exports = rangeSub;","const Range = require(\"./IntRange\");\n\n/**\n * range(1,5) ∩ range(3,7) = [range(3,5)]\n * @param {Range} args\n * @returns {Array.<Range>}\n */\nlet rangeIntersect = (...args)=> {\n    if (args.length === 0) {\n        return [];\n    }\n    const r1 = args.shift().clone();\n    while (args.length > 0) {\n        const r2 = args.shift();\n        if (r1.length === 0 && r2.length !== 0) {\n            if (r1.begin < r2.min || r1.begin > r2.max) {\n                return [];\n            }\n        } else if (r1.length !== 0 && r2.length === 0) {\n            if (r2.begin >= r1.min && r2.begin <= r1.max) {\n                r1.begin = r2.begin;\n                r1.length = 0;\n            } else {\n                return [];\n            }\n        } else if (r1.length === 0 && r2.length === 0) {\n            if (r1.begin !== r2.begin) {\n                return [];\n            }\n        } else {\n            if (r1.min < r2.min) {\n                if (r1.max < r2.min) {\n                    return [];\n                } else {\n                    r1.min = r2.min;\n                    r1.max = Math.min(r1.max, r2.max);\n                }\n            } else if (r1.min >= r2.min && r1.min <= r2.max) {\n                r1.min = Math.max(r1.min, r2.min);\n                r1.max = Math.min(r1.max, r2.max);\n            } else {\n                return [];\n            }\n        }\n    }\n    return [r1];\n};\n\nmodule.exports = rangeIntersect;","const Range = require(\"./IntRange\");\n\n/**\n * 创建一个 Range 的实例\n * @param {number} min\n * @param {number} max\n * @returns {Range}\n */\nlet range = (min , max=undefined)=>{\n    if(max === undefined){\n        return Range.create(min, 0);\n    }\n\n    if(min>max){\n        let t = min;\n        min = max;\n        max = t;\n    }\n    return Range.create(min, max-min+1);\n};\n\nmodule.exports = range;","const Range = require(\"./IntRange\");\n\n/**\n * 多个 Range 相加\n * 例如：\n * range(1,5) + range(3,7) = [range(1,7)]\n * range(1,2) + range(4,6) = [range(1,2), range(4,6)]\n * @param {Range} args\n * @returns {Array.<Range>}\n */\nlet rangeAdd = (...args)=>{\n    const result = [];\n    args.sort((a,b)=>{\n        return a.min - b.min;\n    });\n    while (args.length>0){\n        const curRange = args.shift().clone();\n        const removeIdxs = [];\n        for (let i = 0; i<result.length; i++) {\n            let range = result[i];\n            if(curRange.isIntersect(range)){\n                removeIdxs.push(i);\n                curRange.min = Math.min(curRange.min, range.min);\n                curRange.max = Math.max(curRange.max, range.max);\n            }\n        }\n\n        for (let i = removeIdxs.length-1; i >= 0 ; i--) {\n            let obsolete = result.splice(removeIdxs[i], 1)[0];\n            Range.release(obsolete);\n        }\n\n        result.push(curRange);\n    }\n    return result;\n};\n\nmodule.exports = rangeAdd;","const Range = require(\"./IntRange\");\nconst rangeSub = require(\"./rangeSub\");\nconst rangeIntersect = require(\"./rangeIntersect\");\n\n/**\n * range(1,5) cut range(3,7) = [range(1,2), range(3,5), range(6,7)]\n * @param {Range} args\n * @returns {Array.<Range>}\n */\nlet rangeCut = (...args)=>{\n    let result = [];\n    let laveList = args;\n    while (laveList.length>0) {\n        let curRange = laveList.shift().clone();\n        let jiaoArr = [];   //保存所有交集\n        for (let i = 0; i < result.length; i++) {\n            let subRange = result[i];\n            jiaoArr.push(...rangeIntersect(curRange, subRange));\n        }\n        let chaArr = rangeSub(curRange, ...jiaoArr);    //求差集\n\n        //替换交集\n        let tempResult = [];\n        for (let i = 0; i < result.length; i++) {\n            let subRange = result[i];\n            let isFind = false;\n            for (let j = 0; j < jiaoArr.length; j++) {\n                let jiaoRange = jiaoArr[j];\n                if(subRange.isIntersect(jiaoRange)){\n                    isFind = true;\n                    jiaoArr.splice(j,1);\n                    tempResult.push(...rangeCut2(subRange, jiaoRange));\n                    break;\n                }\n            }\n            if(!isFind){\n                tempResult.push(subRange);\n            }\n        }\n\n        //添加差集\n        tempResult.push(...chaArr);\n        result = tempResult;\n    }\n    result.sort((a,b)=>{return a.min-b.min});\n    return result;\n};\n\nlet rangeCut2 = (range1, range2)=>{\n    let result1 = rangeSub(range1,range2);\n    let result2 = rangeSub(range2,range1);\n    let result3 = rangeIntersect(range1, range2);\n    let arr = [];\n    if(result1.length>0){\n        arr.push(...result1);\n    }\n    if(result2.length>0){\n        arr.push(...result2);\n    }\n    if(result3.length>0){\n        arr.push(...result3);\n    }\n    arr.sort((a,b)=>{return a.min-b.min});\n    return arr;\n};\n\nmodule.exports = rangeCut;","import {Event} from \"easy-event\";\n\nexport default class TextFieldEvent extends Event{\n    static RENDER = Symbol('render');\n}","const cache = [];\n\n/**\n * 创建一个随机字符串\n * @param {number} expect   随机字符串的长度，最小长度1，最大长度16\n * @returns {string}\n */\nconst randomString = function(expect) {\n    expect = !expect ? 16 : expect;\n    expect = Math.min(expect, 16);\n    let str;\n    while (true){\n        str = Math.random().toString(36).substring(2);\n        while (str.length < expect) {\n            str += Math.random().toString(36).substring(2);\n        }\n        if(cache.indexOf(str)===-1){\n            cache.push(str);\n            break;\n        }\n    }\n    return str.substring(0, expect);\n};\n\nexport {randomString}","import {Range} from 'int-range';\nimport {randomString} from \"../util/randomString\";\n\nlet objPool = [];\n\n/**\n * 行内样式范围\n */\nexport default class InlineStyleRange extends Range {\n\n    #key;\n\n    /**\n     *\n     * @param {number} begin\n     * @param {number} length\n     * @param {{}|null} style\n     */\n    constructor(begin, length, style = null) {\n        super(begin, length);\n\n        /**\n         * 样式的值\n         * 例如：'{color:\"red\"}'\n         * @returns {{}}\n         */\n        this.style = style;\n\n        this.#key = randomString(5);\n    }\n\n    get key() { return this.#key; }\n    // /**\n    //  *\n    //  * @returns {String}\n    //  */\n    // get styleName() {\n    //     if (this.style === null) {\n    //         return '';\n    //     }\n    //     return Object.keys(this.style)[0];\n    // }\n    //\n    // /**\n    //  *\n    //  * @returns {String}\n    //  */\n    // get styleValue() {\n    //     if (this.styleName == null) {\n    //         return '';\n    //     }\n    //     return this.style[this.styleName];\n    // }\n\n    /**\n     *\n     * @param {InlineStyleRange} sr\n     * @returns {boolean}\n     */\n    equal(sr) {\n        if(!super.equal(sr)){\n            return false;\n        }\n\n        if(!sr.style && !this.style){\n            return true;\n        }\n\n        if(sr.style && this.style){\n            const keys1 = Object.keys(this.style);\n            const keys2 = Object.keys(sr.style);\n            if(keys1.length !== keys2.length){\n                return false;\n            }\n            for (let i = 0; i < keys1.length; i++) {\n                const key = keys1[i];\n                if(this.style[key] !== sr.style[key]){\n                    return false;\n                }\n            }\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     *\n     * @returns {InlineStyleRange}\n     */\n    clone() {\n        const sr = new InlineStyleRange(this.begin, this.length);\n        sr.style = {...sr.style, ...this.style};\n        return sr;\n    }\n\n    /**\n     *\n     * @param begin\n     * @param length\n     * @param style\n     * @returns {InlineStyleRange}\n     */\n    static create(begin, length, style = null) {\n        if (objPool.length > 0) {\n            const obj = objPool.pop();\n            obj.begin = begin;\n            obj.length = length;\n            obj.style = style;\n            return obj;\n        } else {\n            return new InlineStyleRange(begin, length, style);\n        }\n    }\n\n    /**\n     *\n     * @param {InlineStyleRange} obj\n     */\n    static release(obj){\n        if(obj instanceof InlineStyleRange){\n            obj.style = null;\n            obj.begin = obj.length = 0;\n            objPool.push(obj);\n        }\n    }\n}","export default class BlockType {\n    /**\n     * 普通段落\n     * @type {symbol}\n     */\n    static BLOCK = Symbol('block');\n    /**\n     * 引用\n     * @type {symbol}\n     */\n    static QUOTE = Symbol('quote');\n}","import React,{Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {rangeCut} from 'int-range';\nimport InlineStyleRange from \"../model/InlineStyleRange\";\nimport BlockType from \"../model/BlockType\";\nimport \"../css/index.css\";\n\nexport default class TextBlock extends Component{\n\n    static propTypes = {\n        block: PropTypes.object.isRequired\n    };\n\n    render() {\n        const block = this.props.block;\n        return TextBlock.renderBlock(block);\n    }\n\n\n    static renderBlock(block){\n        if(block.type === BlockType.QUOTE){\n            return <blockquote data-key={block.key} id={block.key} style={block.style}>{TextBlock.renderContent(block)}</blockquote>\n        }\n        else{\n            return <p data-key={block.key} id={block.key} style={block.style}>{TextBlock.renderContent(block)}</p>;\n        }\n    }\n\n    /**\n     *\n     * @param {Block} block\n     */\n    static renderContent(block) {\n        let list = [];\n        let offset = 0;\n\n        if(block.text.length===0){\n            return '\\n';\n        }\n\n        let inlineStyles = TextBlock.parseInlineStyleRanges(block);\n        while (offset < block.text.length) {\n            let text = '';\n            const is = inlineStyles.shift();\n            if(is){\n                if(offset < is.begin){\n                    text = block.text.substring(offset, is.begin);\n                    list.push(text);\n                }\n\n                offset = is.begin;\n\n                text = block.text.substr(offset, is.length);\n                list.push(<span key={is.key} data-key={is.key} style={is.style}>{text}</span>);\n\n                offset += is.length;\n            }\n            else{\n                text = block.text.substring(offset, block.text.length);\n                list.push(text);\n\n                offset = block.text.length;\n            }\n        }\n        return list;\n    }\n\n\n    static parseInlineStyleRanges(block) {\n\n        const inlineStyles = [];\n\n        const ranges = rangeCut(...block.inlineStyleRanges);\n        ranges.forEach((range) => {\n\n            let style = null;\n            for (let i = 0; i < block.inlineStyleRanges.length; i++) {\n                const sr = block.inlineStyleRanges[i];\n                if (range.begin >= sr.begin\n                    && (range.begin < sr.begin + sr.length || block.length === 0)) {\n                    if (style === null) {\n                        style = {};\n                    }\n                    if (sr.style != null) {\n                        style = {...style, ...sr.style}\n                    }\n                }\n            }\n\n            if (style != null) {\n                inlineStyles.push(InlineStyleRange.create(range.begin, range.length, style));\n            }\n        });\n\n        //TODO 合并inlineStyles\n\n        return inlineStyles;\n    }\n}","import React,{Component} from \"react\";\nimport PropTypes from \"prop-types\";\nimport TextBlock from \"./TextBlock\";\n\nexport default class TextContent extends Component{\n    static propTypes = {\n        content : PropTypes.object.isRequired\n    };\n\n    render() {\n        const {content} = this.props;\n        return (\n            <div className=\"TextContent\">{this.renderBlockList(content)}</div>\n        );\n    }\n\n    /**\n     *\n     * @param content\n     * @returns {Array}\n     */\n    renderBlockList(content) {\n        let list = [];\n        content.getBlockList().forEach((v) => {\n            list.push(<TextBlock key={v.key} block={v}/>)\n        });\n        return list;\n    }\n}","export default class TimerUtil {\n\n    /**\n     *\n     * @param handler\n     * @param thisObj\n     * @param time\n     * @param args\n     * @returns {number}\n     */\n    static setTimeout(handler, thisObj, time, ...args){\n        handler = handler.bind(thisObj);\n        return setTimeout(handler, time, ...args);\n    }\n}\n","import TimerUtil from \"./TimerUtil\";\n\nlet tryCount = 0;\n\nexport default class SelectionUtil {\n\n    /**\n     * 保存光标位置\n     * @param {TextFieldState} tfState\n     */\n    static save(tfState) {\n        let sel = window.getSelection();\n        let selRange;\n\n        if(sel.rangeCount===0){\n            if(tryCount++ < 10){\n                TimerUtil.setTimeout(SelectionUtil.save, null, 0, tfState);\n            }\n            else{\n                tryCount = 0;\n            }\n            return;\n        }\n\n        tryCount = 0;\n\n        try {\n            selRange = sel.getRangeAt(0);\n        } catch (err) {\n            return;\n        }\n\n        const {key, selection, content} = tfState;\n\n        if(content.blockCount===0){\n            selection.reset();\n            console.log('光标位置:', selection.toString());\n            return;\n        }\n\n        let getKey = (findNode, offset) => {\n            if(findNode.className === 'TextContent'){\n                let block = content.getBlockList()[Math.max(0, offset-1)];\n                if(block !== undefined){\n                    return block.key;\n                }\n                else{\n                    return '';\n                }\n            }\n\n            let depthFind = (container)=>{\n                if(container === findNode){\n                    find = true;\n                    return;\n                }\n                if(container.nodeName === '#text'){\n                    return;\n                }\n                for (let i = 0; i < container.childNodes.length; i++) {\n                    depthFind(container.childNodes[i]);\n                    if(find){\n                        return;\n                    }\n                }\n            };\n\n            const tfDom = document.getElementById(key);\n            if(!tfDom)return '';\n            const contentDom = tfDom.childNodes[0];\n            if(!contentDom)return '';\n            let find = false;\n            for (let i = 0; i < contentDom.childNodes.length; i++) {\n                const blockNode = contentDom.childNodes[i];\n                depthFind(blockNode);\n\n                if(find){\n                    return blockNode.dataset['key'];\n                }\n            }\n            return '';\n        };\n\n        let getGlobalOffset = (findNode, offset) => {\n            if(findNode.className==='TextContent')\n            {\n                const block = content.getBlockList()[Math.max(0,offset-1)];\n                if(block === undefined){\n                    return 0;\n                }\n                const blockRange = content.getBlockRange(block.key);\n                if(blockRange===null){\n                    return 0;\n                }\n                return blockRange.max+1;\n            }\n\n            let depthFind = (container)=>{\n                if(container === findNode){\n                    count += offset;\n                    find = true;\n                    return;\n                }\n                if(container.nodeName === '#text'){\n                    count += container.length;\n                    return;\n                }\n                for (let i = 0; i < container.childNodes.length; i++) {\n                    depthFind(container.childNodes[i]);\n                    if(find){\n                        return;\n                    }\n                }\n            };\n\n            const tfDom = document.getElementById(key);\n            if(!tfDom)return 0;\n            const contentDom = tfDom.childNodes[0];\n            if(!contentDom)return 0;\n            let find = false;\n            let count = 0;\n            for (let i = 0; i < contentDom.childNodes.length; i++) {\n                const blockNode = contentDom.childNodes[i];\n                depthFind(blockNode);\n\n                // 从第2段开始，就要累加前面的换行\n                if(i>0 && contentDom.childNodes[i-1].innerText !== '\\n'){\n                    count += 1;\n                }\n\n                if(find){\n                    return count;\n                }\n            }\n            return 0;\n        };\n\n        const startKey = getKey(selRange.startContainer, selRange.startOffset);\n        const startOffset = getGlobalOffset(selRange.startContainer, selRange.startOffset);\n        const endKey = getKey(selRange.endContainer, selRange.endOffset);\n        const endOffset = getGlobalOffset(selRange.endContainer, selRange.endOffset);\n        selection.update(startKey, startOffset, endKey, endOffset);\n\n        console.log('光标位置:', selection.toString());\n    }\n\n    /**\n     * 应用光标位置\n     * @param {TextFieldState} tfState\n     */\n    static set(tfState) {\n        let {selection} = tfState;\n\n        let depthFind = (result, container, globalOffset)=>{\n            if(container.nodeName === '#text' || container.nodeName === 'BR'){\n                const len = container.length===undefined?0:container.length;\n                if(globalOffset <= result.count+len){\n                    result.offset = globalOffset-result.count;\n                    result.node = container;\n                    result.find = true;\n                    return;\n                }\n                else{\n                    result.count += container.length;\n                }\n            }\n            for (let i = 0; i < container.childNodes.length; i++) {\n                depthFind(result, container.childNodes[i], globalOffset);\n                if(result.find){\n                    return;\n                }\n            }\n            // fixme 这里退出会产生异常\n            return;\n        };\n\n        /**\n         * 获得光标所在的DOM节点，和在此DOM节点上的偏移量\n         * @param key\n         * @param gloablOffset\n         */\n        const getPosition = (key, gloablOffset)=>{\n            const result = {node:null, offset:0, count:0, find:false};\n            const tfDOM = document.getElementById(tfState.key);\n            const contentDOM = tfDOM.childNodes[0];\n            for (let i = 0; i < contentDOM.childNodes.length; i++) {\n                const blockNode = contentDOM.childNodes[i];\n                if((blockNode.nodeName === 'P' && blockNode.dataset['key'] === key)\n                    || (blockNode.nodeName === 'BLOCKQUOTE' && blockNode.dataset['key'] === key))\n                {\n                    //当前blockNode就是要找的段落\n                    //找到最深层的节点\n                    for (let j = 0; j < blockNode.childNodes.length; j++) {\n                        const child = blockNode.childNodes[j];\n                        //深度查找\n                        depthFind(result, child, gloablOffset);\n                        if(result.find){\n                            return result;\n                        }\n                    }\n                }\n                else{\n                    result.count += blockNode.innerText.length;\n                    if(i+1<contentDOM.childNodes.length && blockNode.innerText!=='\\n'){      //加上换行\n                        result.count += 1;\n                    }\n                }\n            }\n            return result;\n        };\n\n        const position1 = getPosition(selection.startKey, selection.startOffset);\n        const position2 = getPosition(selection.endKey, selection.endOffset);\n        const selRange = document.createRange();\n        selRange.setStart(position1.node, position1.offset);\n        selRange.setEnd(position2.node, position2.offset);\n        const sel = window.getSelection();//获取当前选中区域\n        sel.removeAllRanges();//移出所有的选中范围\n        sel.addRange(selRange);//添加新建的范围\n    }\n\n    /**\n     * 全选\n     * @param {TextFieldState} tfState\n     */\n    static selectAll(tfState){\n        const {content, selection} = tfState;\n        const blockList = content.getBlockList();\n        if(blockList.length > 0){\n            const firstBlock = blockList[0];\n            const lastBlock = blockList[blockList.length-1];\n            selection.update(firstBlock.key, 0, lastBlock.key, content.getText().length);\n            SelectionUtil.set(tfState);\n        }\n    }\n\n    /**\n     * 返回按下键盘退格键的删除范围\n     * @param {TextFieldState} tfState\n     * @returns {Range}\n     */\n    static getPressBackSpaceRange(tfState){\n        const {content, selection} = tfState;\n        const delRange = selection.range;\n        if(content.blockCount===0){\n            delRange.begin = 0;\n            delRange.length = 0;\n        }\n        else if(delRange.length === 0){ //当前光标没有框选，所以删除的范围是左边一格\n            delRange.begin -= 1;\n            delRange.begin = Math.max(delRange.begin, 0);\n            delRange.length = 1;\n            if(tfState.text.codePointAt(delRange.begin-1) > 0xFFFF){    //占用4个字节的Unicode\n                delRange.min -= 1;\n            }\n        }\n        return delRange;\n    }\n\n    /**\n     * 返回按下键盘Del键的删除范围\n     * @param {TextFieldState} tfState\n     * @returns {Range}\n     */\n    static getPressDeleteRange(tfState){\n        const {content, selection} = tfState;\n        const delRange = selection.range;\n        if(content.blockCount===0){\n            delRange.begin = 0;\n            delRange.length = 0;\n        }\n        else if(delRange.length === 0){ //当前光标没有框选，所以删除的范围是右边一格\n            delRange.begin = Math.min(delRange.begin, tfState.text.length);\n            delRange.length = 1;\n            if(tfState.text.codePointAt(delRange.begin) > 0xFFFF){  //占用4个字节的Unicode\n                delRange.length += 1;\n            }\n        }\n        return delRange;\n    }\n}\n\n","import React, {Component} from \"react\";\nimport PropTypes from \"prop-types\";\nimport TextFieldEvent from \"../event/TextFieldEvent\";\nimport TextContent from \"./TextContent\";\nimport TimerUtil from \"../util/TimerUtil\";\nimport SelectionUtil from \"../util/SelectionUtil\";\nimport * as Nav from \"../util/NavigatorUtil\";\nimport \"../css/index.css\";\n\nexport default class TextField extends Component {\n\n    /**\n     * 正在进行输入法\n     * @type {boolean}\n     */\n    #isCompositionStart = false;\n\n    /**\n     * 检测鼠标是否按下\n     * @type {boolean}\n     */\n    #mouseDown = false;\n\n    static propTypes = {\n        tfState: PropTypes.object.isRequired\n    };\n\n    constructor(props) {\n        super(props);\n\n        /**\n         *\n         * @type {{renderData: Object, tfState: TextFieldState}}\n         */\n        this.state = {\n            tfState: this.props.tfState,\n            renderData: null\n        };\n\n        this.tfState.addEventListener(TextFieldEvent.RENDER, this.onRenderHandler, this);\n        this.onMouseUpHandler = this.onMouseUpHandler.bind(this);\n    }\n\n    // 组件卸载\n    componentWillUnmount() {\n        const {tfState} = this.props;\n        tfState.removeEventListener(TextFieldEvent.RENDER, this.onRenderHandler);\n        document.removeEventListener('mouseup', this.onMouseUpHandler);\n    }\n\n    // 组件渲染完成\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if(this.state.renderData.needCursor){   //请求定位光标，这个操作必须在DOM节点渲染完成后执行\n            SelectionUtil.set(this.tfState);\n        }\n    }\n\n    // tfState请求渲染\n    onRenderHandler(event) {\n        this.state.renderData = {...this.state.renderData, ...event.data};\n        this.setState({});\n    }\n\n    render() {\n        const {key, editable, style, content} = this.props.tfState;\n\n        return (\n            <div id={key}\n                 className=\"TextField\"\n                 suppressContentEditableWarning={true}  //用来屏蔽内容可编辑的警告\n                 contentEditable={editable}\n                 style={style}\n                 onMouseDown={(e) => {\n                     this.onMouseDownHandler(e)\n                 }}\n                 onFocus={(e) => {\n                     SelectionUtil.save(this.tfState);\n                 }}\n                 onBlur={(e) => {\n                     SelectionUtil.save(this.tfState);\n                 }}\n                 onKeyDown={(e) => {\n                     this.onKeyDownHandler(e)\n                 }}\n                 onKeyUp={(e) => {\n                     this.onKeyUpHandler(e)\n                 }}\n                 onCompositionStart={(e) => {\n                     this.onCompositionStartHandler(e)\n                 }}\n                 onCompositionEnd={(e) => {\n                     this.onCompositionEndHandler(e)\n                 }}\n                 onPaste={(e) => {\n                     this.onPasteHandler(e);\n                 }}\n                 onCut={(e) => {\n                     this.onCutHandler(e);\n                 }}\n                 onInput={(e) => {\n                     this.onInputHandler(e);\n                 }}><TextContent content={content}/></div>\n        )\n    }\n\n    onMouseDownHandler(e) {\n        this.#mouseDown = true;\n        document.addEventListener('mouseup', this.onMouseUpHandler);\n        SelectionUtil.save(this.tfState);\n    }\n\n    onMouseUpHandler(e) {\n        this.#mouseDown = false;\n        document.removeEventListener('mouseup', this.onMouseUpHandler);\n        TimerUtil.setTimeout(() => {\n            SelectionUtil.save(this.tfState);\n        }, this, 0);\n    }\n\n    onKeyDownHandler(e) {\n        if (this.#mouseDown) {\n            e.preventDefault();\n            return;\n        }\n\n        const {key, keyCode, ctrlKey, metaKey, altKey} = e;\n        const {selection, content} = this.tfState;\n        // TODO 可配置\n\n        // 向上移动光标的时候，如果前面的Block是\\n，光标就会跳过此Block，造成无法定位的问题\n        if (key === 'ArrowUp') {\n            const curBlock = content.getBlocksByRange(selection.range)[0];\n            if (curBlock) {\n                const list = content.getBlockList();\n                for (let i = 1; i < list.length; i++) {\n                    if (list[i].key === curBlock.key) {\n                        const beforeBlock = list[i - 1];\n                        if (beforeBlock.length === 0) {\n                            e.preventDefault();\n                            const range = content.getBlockRange(beforeBlock.key);\n                            selection.update(beforeBlock.key, range.begin, beforeBlock.key, range.begin);\n                            SelectionUtil.set(this.tfState);\n                            return;\n                        }\n                    }\n                }\n            }\n        }\n\n        if (key === 'Shift' || key === 'Control' || key === 'Alt' || key === 'Meta' || key === 'CapsLock' || key === 'Escape'\n            || key === 'ArrowLeft' || key === 'ArrowRight' || key === 'ArrowUp' || key === 'ArrowDown') {\n            return;\n        }\n        const isWin = Nav.isWin();\n        const isMac = Nav.isMac();\n        if (isWin || isMac) {\n            const ctrlOrMeta = isWin ? e.ctrlKey : e.metaKey;\n            const isAlt = e.altKey;\n\n            if (ctrlOrMeta && (keyCode === 67 || keyCode === 86 || keyCode === 88)) {   //ctrl + c,v,x\n                return;\n            }\n            if (isMac && isAlt && (keyCode === 73 || keyCode === 85 || keyCode === 78 || keyCode === 69)) {   //在mac系统下 alt + i,u,n,e 会出现 Dead\n                return;\n            }\n            if (keyCode === 65 && ((isMac && metaKey) || (isWin && ctrlKey))) { //全选\n                SelectionUtil.selectAll(this.tfState);\n                return;\n            }\n        }\n\n        e.preventDefault();\n        TimerUtil.setTimeout(this.onInputText, this, 0, key, keyCode, ctrlKey, metaKey, altKey)\n    }\n\n    onInputText(key, keyCode, ctrlKey, metaKey, altKey) {\n        const tfState = this.tfState;\n        const {selection, content} = tfState;\n\n        if (this.#isCompositionStart) {\n            return;\n        }\n\n        if (key === 'Backspace') {\n            const delRange = SelectionUtil.getPressBackSpaceRange(tfState);\n            tfState.deleteText(delRange.begin, delRange.length);\n        } else if (key === 'Delete') {\n            const delRange = SelectionUtil.getPressDeleteRange(tfState);\n            tfState.deleteText(delRange.begin, delRange.length);\n        } else {\n            // 输入行为\n            // 如有当前光标框选了内容，就先把这些内容删除\n            const delRange = selection.range;\n            if(delRange.length>0){\n                content.deleteTextByRange(delRange);\n            }\n            if (key === 'Enter') {\n                tfState.wrap(selection.startOffset);\n            }\n            else if (key === 'Tab') {\n                tfState.insertText('\\t', selection.startOffset);\n            }\n            else{\n                tfState.insertText(key, selection.startOffset);\n            }\n        }\n    }\n\n    onKeyUpHandler(e) {\n        // 按方向键后，更新光标位置\n        if (!this.#isCompositionStart\n            && (e.key === 'ArrowRight'\n                || e.key === 'ArrowLeft'\n                || e.key === 'ArrowUp'\n                || e.key === 'ArrowDown')) {\n            SelectionUtil.save(this.tfState);\n        }\n    }\n\n    /**\n     * 输入法开始\n     * @param e\n     */\n    onCompositionStartHandler(e) {\n        e.preventDefault();\n        this.#isCompositionStart = true;\n        const tfState = this.tfState;\n        const selection = tfState.selection;\n        if (selection.length > 0) {\n            tfState.deleteText(selection.startOffset, selection.length);\n        }\n    }\n\n    /**\n     * 输入法结束 插入输入法生成的内容\n     * @param e\n     */\n    onCompositionEndHandler(e) {\n        e.preventDefault();\n        const data = e.data;    //输入法返回的文字\n        const tfState = this.tfState;\n        const selection = tfState.selection;\n        TimerUtil.setTimeout(() => {\n            this.#isCompositionStart = false;\n            tfState.insertText(data, selection.startOffset);\n        }, this, 0);\n    }\n\n    onInputHandler(e){\n        if(this.#isCompositionStart)return;\n        // 支持touch bar的输入，此时dom节点、光标位置已经发生改变，只要同步state就行，不用重新渲染\n        const tfState = this.tfState;\n        const selection = tfState.selection;\n        if (selection.length > 0) {\n            tfState.content.deleteTextByRange(selection.range);\n        }\n        const oldText = tfState.text;\n        const newText = e.target.innerText;\n        const addLen = newText.length - oldText.length;\n        if(addLen>0){\n            const addText = newText.substr(selection.startOffset, addLen);\n            tfState.insertText(addText, selection.startOffset);\n        }\n    }\n\n    /**\n     *\n     * @param {ClipboardEvent} e\n     */\n    onPasteHandler(e) {\n        this.#mouseDown = false;\n        e.preventDefault();\n        const text = e.clipboardData.getData('text');\n        const {selection} = this.tfState;\n        this.tfState.insertText(text, selection.startOffset);\n    }\n\n    onCutHandler(e) {\n        e.preventDefault();\n        const {selection} = this.tfState;\n        if (selection.length > 0) {\n            document.execCommand('copy', false, 'abc');\n            this.tfState.deleteText(selection.startOffset, selection.length);\n        }\n    }\n\n    /**\n     *\n     * @returns {TextFieldState}\n     */\n    get tfState() {\n        return this.state.tfState;\n    }\n\n    /**\n     *\n     * @returns {Content}\n     */\n    get content() {\n        return this.tfState.content;\n    }\n}","/**\n * 是否是Mac系统\n * @returns {boolean}\n */\nlet isMac = ()=>{\n    return (navigator.platform === \"Mac68K\") || (navigator.platform === \"MacPPC\") || (navigator.platform === \"Macintosh\") || (navigator.platform === \"MacIntel\");\n};\n\n/**\n * 是否是Windows系统\n * @returns {boolean}\n */\nlet isWin = ()=>{\n    return (navigator.platform === \"Win32\") || (navigator.platform === \"Windows\");\n};\n\nexport {isMac, isWin};","import InlineStyleRange from \"../model/InlineStyleRange\";\nimport BlockType from './BlockType'\nimport {randomString} from \"../util/randomString\";\nimport {rangeIntersect} from \"int-range\";\n\nconst objPool = [];\n\n/**\n * 块级元素，一个 Block 对应 DOM 中的一个 <p> 标签\n */\nexport default class Block {\n    /**\n     * 键值，由5位随机字符串组成\n     * @type {string}\n     */\n    #key = '';\n\n    /**\n     * 存储行内样式\n     * @type {Array.<InlineStyleRange>}\n     */\n    #inlineStyleRanges = [];\n\n    /**\n     * 文字内容\n     * @type {string}\n     */\n    #text = \"\";\n\n    /**\n     * 段落样式\n     * @type {{}}\n     */\n    style = null;\n\n    /**\n     * 段落类型\n     * @type {symbol}\n     */\n    type = BlockType.BLOCK;\n\n    /**\n     *\n     * @param {string} text\n     */\n    constructor(text=''){\n        this.#text = text;\n        this.#key = randomString(5);\n    }\n\n    /**\n     *\n     * @param {Range} range 局部范围\n     */\n    deleteText(range) {\n        this.#text = this.text.substr(0, range.begin) + this.text.substr(range.begin+range.length);\n        // 更新样式范围\n        this.#inlineStyleRanges = this.#inlineStyleRanges.map((sr)=>{\n            const intersect = rangeIntersect(sr, range)[0];\n            if(intersect!==undefined){\n                //相交的情况\n                sr.length -= intersect.length;\n                //判断左移\n                if(range.min<sr.min){\n                    sr.begin -= (sr.min-range.min);\n                }\n            }\n            else{\n                //非相交情况\n                //如果 range 在 sr 的右侧，那么不需修改 sr\n                //如果 range 在 sr 的左侧，那么 sr 要向左移动\n                if(range.max < sr.min){\n                    sr.begin -= range.length;\n                }\n            }\n            return sr;\n        });\n    }\n\n    /**\n     *\n     * @param {string} text\n     * @param {number} offset\n     */\n    insertText(text, offset) {\n        this.#text = this.#text.substr(0, offset)\n            + text\n            + this.#text.substr(offset);\n\n        // 更新样式范围\n        this.#inlineStyleRanges = this.#inlineStyleRanges.map((sr) => {\n            if ((offset > sr.min && offset <= sr.max + 1)\n                || (sr.length === 0 && offset === sr.min)\n                || (offset === 0 && sr.min === 0)) {\n                sr.length += text.length;\n            } else if (offset <= sr.min) {\n                sr.begin += text.length;\n            }\n\n            return sr;\n        });\n    }\n\n    /**\n     * 合入\n     * @param {Block} block\n     */\n    merge(block) {\n        const oldLen = this.length;\n        this.#text += block.text;\n\n        const list = block.inlineStyleRanges.map((sr)=>{\n            return new InlineStyleRange(sr.begin+oldLen, sr.length, sr.style);\n        });\n\n        list.forEach((sr)=>{\n            this.#inlineStyleRanges.push(sr);\n        });\n    }\n\n    /**\n     * 分割段落\n     * @param {number} position 分割的位置\n     * @returns {Block | null}\n     */\n    split(position) {\n        if(position<0 || position>this.length){\n            return null;\n        }\n\n        const newBlock = Block.create(this.#text.substr(position));\n        // 继承到下一段的样式\n        newBlock.style = {...newBlock.style, ...this.style};\n        this.#inlineStyleRanges.forEach((sr)=>{\n            if(position<=sr.max || position===this.#text.length){\n                /**\n                 * 拷贝一份样式，给下一段使用\n                 * @type {InlineStyleRange}\n                 */\n                // const copy = sr.clone();\n                if(position<sr.min){\n                    // copy.begin -= position;\n                    newBlock.addStyle(sr.style, sr.begin-position, sr.length);\n                }\n                else if(position===this.#text.length){\n                    newBlock.addStyle(sr.style, 0, 0);\n                }\n                else if(position>=sr.min){\n                    newBlock.addStyle(sr.style, 0, sr.length-(position-sr.min));\n                }\n            }\n        }, this);\n\n        //更新本段\n        this.#text = this.#text.substr(0, position);\n        this.#inlineStyleRanges = this.#inlineStyleRanges.filter((sr)=>{\n            if(sr.min<position) {\n                sr.max = Math.min(sr.max, this.#text.length);\n                return sr;\n            }\n            return null;\n        });\n        return newBlock;\n    }\n\n    /**\n     *\n     * @param {{}}     style\n     * @param {number} offset   开始位置\n     * @param {number} length   长度\n     */\n    addStyle(style, offset=0, length=0){\n\n        let styleName = Object.keys(style)[0];\n\n        //判断是否需要覆盖样式\n        let isCover = false;\n        for (let i = 0; i < this.#inlineStyleRanges.length; i++) {\n            const sr = this.#inlineStyleRanges[i];\n            const _styleName = Object.keys(sr.style)[0];\n            if(_styleName === styleName){\n                if(sr.begin === offset && sr.length === length ) {\n                    this.#inlineStyleRanges[i].style = style;\n                    isCover = true;\n                    break;\n                }\n            }\n        }\n\n        if(!isCover){\n            let sr = InlineStyleRange.create(offset, length, style);\n            sr.style = style;\n            this.#inlineStyleRanges.push(sr);\n        }\n    }\n\n    /**\n     * 清除样式\n     */\n    clearStyle(){\n        for (let i = 0; i < this.#inlineStyleRanges.length; i++) {\n            InlineStyleRange.release(this.#inlineStyleRanges[i]);\n        }\n        this.type = BlockType.BLOCK;\n        this.#inlineStyleRanges.length = 0;\n        this.style = null;\n    }\n\n    /**\n     * key\n     * @returns {string}\n     */\n    get key() { return this.#key; }\n\n    /**\n     * 文字长度\n     * @returns {number}\n     */\n    get length() {\n        return this.text.length;\n    }\n\n    /**\n     * 样式\n     * @returns {Array.<InlineStyleRange>}\n     */\n    get inlineStyleRanges() {\n        return this.#inlineStyleRanges;\n    }\n\n    /**\n     * @returns {string}\n     */\n    get text() { return this.#text; }\n    set text(value) {\n        this.#text = value;\n    }\n\n    /**\n     *\n     * @param text\n     * @returns {Block}\n     */\n    static create(text='') {\n        if(objPool.length>0){\n            const block = objPool.pop();\n            block.text = text;\n            return block;\n        }\n        return new Block(text);\n    }\n\n    /**\n     *\n     * @param {Block} block\n     */\n    static release(block) {\n        block.text = '';\n        for (let i = 0; i < block.inlineStyleRanges.length; i++) {\n            InlineStyleRange.release(block.inlineStyleRanges[i]);\n        }\n        block.inlineStyleRanges.length = 0;\n        block.type = BlockType.BLOCK;\n        block.style = null;\n        objPool.push(block);\n    }\n\n    /**\n     * 克隆\n     * @returns {Block}\n     */\n    clone() {\n        const block = Block.create(this.#text);\n        this.inlineStyleRanges.forEach((sr)=>{\n            block.addStyle(sr.style, sr.begin, sr.length);\n        });\n        block.type = this.type;\n        block.style = {...block.style, ...this.style};\n        return block;\n    }\n}\n\n","import Block from './Block';\nimport {Range, rangeIntersect} from \"int-range\";\n/**\n *\n * @type {Array.<Content>}\n */\nconst objPool = [];\n\n/**\n * 编辑器的内容\n */\nexport  default class Content {\n\n    /**\n     *\n     * @type {Array.<Block>}\n     */\n    #blockList = [];\n\n    /**\n     *\n     * @returns {Array<Block>}\n     */\n    getBlockList() {\n        return this.#blockList;\n    }\n\n    /**\n     *\n     * @param {string} key\n     * @returns {Block}\n     */\n    getBlock(key) {\n        const arr = this.#blockList.filter((block) => {\n            return block.key === key;\n        });\n        return arr[0];\n    }\n\n    /**\n     *\n     * @param idx\n     * @returns {Block}\n     */\n    getBlockAt(idx) {\n        return this.#blockList[idx];\n    }\n\n    /**\n     * 返回与range相交的block列表\n     * @param {Range} range\n     * @return {Array.<Block>}\n     */\n    getBlocksByRange(range){\n        const list = [];\n        this.#blockList.forEach((block)=>{\n            const blockRange = this.getBlockRange(block.key);\n            if(blockRange.isIntersect(range)){\n                list.push(block);\n            }\n        },this);\n        return list;\n    }\n\n    /**\n     * 返回 offset 位置所在的 block\n     * @param offset\n     * @returns {Block}\n     */\n    getBlockByOffset(offset) {\n        const range = Range.create(offset, 0);\n        const block = this.getBlocksByRange(range)[0];\n        Range.release(range);\n        return block;\n    }\n\n    /**\n     * 返回block的index\n     * @param key\n     * @returns {number}\n     */\n    getBlockIndex(key) {\n        for (let i = 0; i < this.#blockList.length; i++) {\n            if(this.#blockList[i].key===key){\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    /**\n     * 插入段落\n     * @param {Block} block\n     * @param {number} index\n     */\n    insertBlock(block, index){\n        this.#blockList.splice(index, 0, block);\n    }\n\n    /**\n     * 获得段落数量\n     * @returns {number}\n     */\n    get blockCount() {\n        return this.#blockList.length;\n    }\n\n    /**\n     * 尾部追加段落\n     * @param text\n     * @returns {Block}\n     */\n    appendBlockText(text = '') {\n        const block = Block.create(text);\n        this.appendBlock(block);\n        return block;\n    }\n\n    /**\n     * 尾部追加段落\n     * @param block\n     */\n    appendBlock(block) {\n        this.#blockList.push(block);\n    }\n\n    /**\n     * 删除block\n     * @param {string} key\n     */\n    delBlock(key) {\n        for (let i = 0; i < this.#blockList.length; i++) {\n            if (this.#blockList[i].key === key) {\n                Block.release(this.#blockList[i]);\n                this.#blockList.splice(i, 1);\n                return;\n            }\n        }\n    }\n\n    /**\n     * 获得编辑器纯文本内容\n     * @returns {string}\n     */\n    getText() {\n        let text = '';\n        this.#blockList.forEach((block, index, array) => {\n            text += block.text;\n            if (index + 1 < array.length) {\n                text += '\\n';\n            }\n        });\n        return text;\n    }\n\n    /**\n     * 获得文本长度\n     * @returns {number}\n     */\n    get length() {\n        return this.getText().length;\n    }\n\n    /**\n     * 获得段落的范围\n     * @param {string} key\n     * @returns {Range}\n     */\n    getBlockRange(key) {\n        const blockList = this.#blockList;\n        let blockOffset = 0;\n        for (let i = 0; i < blockList.length; i++) {\n            const _block = blockList[i];\n            if(_block.key === key){\n                return Range.create(blockOffset, _block.length+1);\n            }\n            blockOffset += (_block.length+1);\n        }\n        return null;\n    };\n\n    /**\n     * 删除range范围内的内容\n     * @param range\n     * @returns {boolean} 存在删除内容返回 true ； 否则返回 false\n     */\n    deleteTextByRange(range) {\n        const blockList = this.#blockList;\n        // 保存需要融合段落的key\n        const keyArr = [];\n        for (let i = blockList.length-2; i >= 0 ; i--) {\n            let _block = blockList[i];\n            let _blockRange = this.getBlockRange(_block.key);\n            // 删除了尾部的换行\n            if(range.min<=_blockRange.max && range.max>=_blockRange.max){\n                if(keyArr.length===0){\n                    keyArr.unshift(blockList[i+1].key);\n                }\n                keyArr.unshift(_block.key);\n            }\n        }\n        if(keyArr.length>=2){\n            const first = this.getBlock(keyArr.shift());\n            const margeLen = keyArr.length;                     //融合段落的数量\n            range.length -= margeLen;                           //因为融合了，所以要减去多余的换行\n\n            keyArr.forEach((key)=>{\n                const block = this.getBlock(key);\n                if(block){\n                    first.merge(block);\n                    const index = blockList.indexOf(block);\n                    blockList.splice(index,1);\n                    Block.release(block);\n                }\n            }, this);\n        }\n        for (let i = 0; i < blockList.length; i++) {\n            const block = blockList[i];\n            const blockRange = this.getBlockRange(block.key);\n            if(blockRange.isIntersect(range)){\n                //全局范围转换为局部范围\n                const localRange = new Range(range.begin-blockRange.begin, range.length);\n                //删除文字\n                block.deleteText(localRange);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * 设置行内文本样式\n     * @param {{}} style\n     * @param {number} offset\n     * @param {number} length\n     */\n    setTextStyle(style, offset = 0, length = undefined) {\n        if(length===undefined){\n            length = this.getText().length;\n        }\n        length = Math.min(this.getText().length, length);\n\n        const styleRange = new Range(offset, length);\n        //const {selection} = this.#editorState;\n        for (let i = 0; i < this.#blockList.length; i++) {\n            const _block = this.#blockList[i];\n            const blockRange = this.getBlockRange(_block.key);\n            const interRange = rangeIntersect(styleRange, blockRange)[0];\n            if(interRange !== undefined){\n                _block.addStyle(style, interRange.begin-blockRange.begin, interRange.length);\n            }\n        }\n    }\n\n    /**\n     * 设置段落样式\n     * @param {string} key\n     * @param {{}} style\n     */\n    setBlockStyle(key, style){\n        const block = this.getBlock(key);\n        if(block) {\n            block.style = {...block.style, ...style};\n        }\n    }\n\n    /**\n     * 设置段落类型\n     * @param {string} key\n     * @param {symbol} type\n     */\n    setBlockType(key, type){\n        const block = this.getBlock(key);\n        if(block && block.type !== type) {\n            block.type = type;\n        }\n    }\n\n    /**\n     * 清除样式\n     */\n    clearStyle(){\n        this.#blockList.forEach((block)=>{\n            block.clearStyle();\n        });\n    }\n\n    /**\n     *\n     * @returns {Content}\n     */\n    static create() {\n        if (objPool.length > 0) {\n            return objPool.pop();\n        }\n        return new Content();\n    }\n\n    /**\n     *\n     * @param {Content} content\n     */\n    static release(content) {\n        const list = content.getBlockList();\n        while (list.length > 0) {\n            const block = list.pop();\n            Block.release(block);\n        }\n        objPool.push(content);\n    }\n}","import {Range} from \"int-range\";\n\nexport default  class SelectionRange {\n\n    #startKey = '';\n    #startOffset = 0;\n    #endKey = '';\n    #endOffset = 0;\n\n    toString() {\n        return (\n            'startKey: ' +\n            this.startKey +\n            ', startOffset:' +\n            this.startOffset +\n            ', ' +\n            'endKey: ' +\n            this.endKey +\n            ', endOffset:' +\n            this.endOffset\n        );\n    }\n\n    /**\n     * 选区字符长度\n     * @returns {number}\n     */\n    get length() {\n        return Math.abs(this.startOffset - this.endOffset);\n    }\n\n    /**\n     * 获得当前光标范围\n     * @returns {*|*}\n     */\n    get range() {\n        return Range.create(this.startOffset, this.length);\n    }\n\n    get startOffset(){ return this.#startOffset; }\n    get startKey() { return this.#startKey; }\n    get endOffset(){ return this.#endOffset; }\n    get endKey() { return this.#endKey; }\n\n    /**\n     *\n     * @param {string} startKey\n     * @param {number} startOffset\n     * @param {string} endKey\n     * @param {number} endOffset\n     */\n    update(startKey, startOffset, endKey, endOffset){\n        this.#startKey = startKey;\n        this.#startOffset = startOffset;\n        this.#endKey = endKey;\n        this.#endOffset = endOffset;\n    }\n\n    reset(){\n        this.#startOffset = this.#endOffset = 0;\n        this.#startKey = this.#endKey = '';\n    }\n}","import Content from \"./Content\";\nimport SelectionRange from \"./SelectionRange\";\nimport {randomString} from \"../util/randomString\";\nimport {Event, EventDispatcher} from \"easy-event\";\nimport {Range} from \"int-range\";\nimport TextFieldEvent from \"../event/TextFieldEvent\";\n// import Block from \"./Block\";\nimport BlockType from \"./BlockType\";\n\n/**\n *\n * @type {Array.<TextFieldState>}\n */\nlet objPool = [];\n\nexport default class TextFieldState extends EventDispatcher {\n\n    #key = randomString(5);\n    #content = Content.create();\n    #selection = new SelectionRange();\n    #editable = false;\n\n    #style = null;\n\n    /**\n     * 删除从 offset 开始，length 长度的字符，如果 offset 或 length 未设置，则删除光标选中区域\n     * @param {number} offset    删除字符的开始位置\n     * @param {number} length    删除字符的长度\n     */\n    deleteText(offset=undefined, length=undefined) {\n        const selection = this.#selection;\n        const content = this.#content;\n        offset = Number(offset);\n        length = Number(length);\n        if(isNaN(offset) || isNaN(length)){\n            offset = selection.startOffset;\n            length = selection.length;\n        }\n\n        if(length===0){\n            return;\n        }\n\n        if(content.blockCount===0){\n            return;\n        }\n\n        const delRange = Range.create(offset, length);\n\n        // 删除了带样式的段落，清除样式，不要真正删除它\n        if(delRange.length===1){\n            const block = content.getBlocksByRange(delRange)[0];\n            if(block && block.length===0 && block.type!==BlockType.BLOCK){\n                block.type = BlockType.BLOCK;\n                this.doRender();\n                return;\n            }\n        }\n        // this.#deleteTextByRange(delRange);\n        const cursorBlock = content.getBlocksByRange(delRange)[0];\n        content.deleteTextByRange(delRange);\n        if(cursorBlock){\n            //更新光标位置\n            const startOffset = delRange.begin;\n            const startKey = cursorBlock.key;\n            selection.update(startKey, startOffset, startKey, startOffset);\n        }\n        this.doRender(cursorBlock);\n    }\n\n    /**\n     * 在 offset 位置换行\n     * @param {number} offset\n     */\n    wrap(offset){\n        const selection = this.#selection;\n        const content = this.#content;\n\n        if(content.blockCount === 0){\n            content.appendBlockText('');\n            content.appendBlockText('');\n            const secondBlock = content.getBlockList()[1];\n            //更新光标位置\n            selection.update(secondBlock.key, 1, secondBlock.key, 1);\n        }\n        else{\n            const curBlock = content.getBlockByOffset(offset);\n            if(!curBlock) return;\n\n            const blockRange =  content.getBlockRange(curBlock.key);\n            const newBlock = curBlock.split(selection.startOffset - blockRange.begin);\n\n            const idx = content.getBlockIndex(curBlock.key);\n            content.insertBlock(newBlock, idx+1);\n\n            //更新光标位置\n            const startOffset = selection.startOffset+1;\n            const startKey = newBlock.key;\n            selection.update(startKey, startOffset, startKey, startOffset );\n        }\n        this.doRender(true);\n    }\n\n    /**\n     * 插入文本\n     * @param {String} text\n     * @param {number} offset\n     */\n    insertText(text, offset){\n        const {selection,content} = this;\n        let curBlock;\n        if (content.blockCount === 0) {\n            curBlock = content.appendBlockText(text);\n        } else {\n            curBlock = content.getBlockByOffset(offset);\n            if (curBlock === null) return;\n\n            const blockRange = content.getBlockRange(curBlock.key);\n            const localOffset = offset - blockRange.begin;\n            curBlock.insertText(text, localOffset);\n            // 回收\n            Range.release(blockRange);\n        }\n\n        //更新光标位置\n        const startOffset = offset + text.length;\n        const startKey = curBlock.key;\n        selection.update(startKey, startOffset, startKey, startOffset);\n\n        this.doRender(true);\n    }\n\n    /**\n     * 设置行内文本样式\n     * @param {Object} style\n     * @param {number} offset\n     * @param {number} length\n     */\n    setTextStyle(style, offset = 0, length = undefined) {\n        this.#content.setTextStyle(style, offset, length);\n        this.doRender();\n    }\n\n    /**\n     * 设置段落样式\n     * @param {string} key\n     * @param {{}} style\n     */\n    setBlockStyle(key, style){\n        this.#content.setBlockStyle(key, style);\n        this.doRender();\n    }\n\n    /**\n     * 设置段落类型\n     * @param {string} key\n     * @param {symbol} type\n     */\n    setBlockType(key, type){\n        this.#content.setBlockType(key, type);\n        this.doRender();\n    }\n\n    /**\n     * 获得光标起始位置的block\n     * @returns {Block}\n     */\n    getCursorBlock(){\n        return this.#content.getBlockByOffset(this.#selection.startOffset);\n    }\n\n    /**\n     * 清除样式\n     */\n    clearStyle(){\n        // this.#style = null;\n        this.#content.clearStyle();\n        this.doRender();\n    }\n\n    release(){\n        Content.release(this.#content);\n        this.#selection = null;\n        this.#editable = false;\n        this.#style = null;\n    }\n\n    /**\n     * 获得文本内容\n     * @returns {string}\n     */\n    get text() {\n        return this.#content.getText();\n    }\n\n    get length() {\n        return this.#content.length;\n    }\n\n    set text(value) {\n        this.#selection.reset();\n        Content.release(this.#content);\n        this.#content = Content.create();\n        this.#content.appendBlockText(value);\n        this.doRender();\n    }\n\n    get key() {\n        return this.#key;\n    }\n\n    get content() {\n        return this.#content;\n    }\n\n    get selection() {\n        return this.#selection;\n    }\n\n    get editable() {\n        return this.#editable;\n    }\n\n    set editable(value) {\n        this.#editable = value;\n        this.doRender();\n    }\n\n    get style() {\n        return this.#style;\n    }\n\n    set style(value) {\n        this.#style = value;\n        this.doRender();\n    }\n\n    doRender(needCursor=false) {\n        this.dispatchEvent(Event.create(TextFieldEvent, TextFieldEvent.RENDER, {needCursor}));\n    }\n\n    /**\n     *\n     * @returns {TextFieldState}\n     */\n    static create() {\n        if (objPool.length > 0) {\n            return objPool.pop();\n        }\n        return new TextFieldState();\n    }\n\n    /**\n     *\n     * @param {TextFieldState} tfState\n     */\n    static release(tfState) {\n        if(tfState instanceof TextFieldState){\n            tfState.release();\n            objPool.push(tfState);\n        }\n    }\n}","class LineHeight{\n    static NAME = 'lineHeight';\n}\n\nclass TextAlign{\n    static NAME = 'textAlign';\n    static LEFT = {textAlign:'left'};\n    static RIGHT = {textAlign:'right'};\n    static CENTER = {textAlign:'center'};\n    static JUSTIFY = {textAlign:'justify'};\n    static INHERIT = {textAlign:'inherit'};\n}\n\n/**\n * 这个属性允许对文本设置某种效果，如加下划线。如果后代元素没有自己的装饰，祖先元素上设置的装饰会“延伸”到后代元素中。不要求用户代理支持 blink。\n */\nclass TextDecoration{\n    static NAME = 'textDecoration';\n\n    /**\n     * 定义文本上的一条线。\n     * @type {{textDecoration: string}}\n     */\n    static OVERLINE = {textDecoration:'overline'};\n    /**\n     * 定义穿过文本的一条线。\n     * @type {{textDecoration: string}}\n     */\n    static LINE_THROUGH = {textDecoration:'line-through'};\n    /**\n     * 定义文本下的一条线。\n     * @type {{textDecoration: string}}\n     */\n    static UNDERLINE = {textDecoration:'underline'};\n    /**\n     * 默认。定义标准的文本。\n     * @type {{textDecoration: string}}\n     */\n    static NONE = {textDecoration:'none'};\n    /**\n     * 定义闪烁的文本。\n     * @type {{textDecoration: string}}\n     */\n    static BLINK = {textDecoration:'blink'};\n    /**\n     * 规定应该从父元素继承 text-decoration 属性的值。\n     * @type {{textDecoration: string}}\n     */\n    static INHERIT = {textDecoration:'inherit'};\n\n}\n\n/**\n * font-weight 属性设置文本的粗细\n */\nclass FontWeight{\n    static NAME = 'fontWeight';\n\n    /**\n     * 定义标准的字符\n     * @type {{}}\n     */\n    static NORMAL = {fontWeight : 'normal'};\n\n    /**\n     * 定义粗体字符\n     * @type {{}}\n     */\n    static BOLD = {fontWeight : 'bold'};\n    /**\n     * 定义更粗的字符\n     * @type {{}}\n     */\n    static BOLDER = {fontWeight : 'bolder'};\n    /**\n     * 定义更细的字符\n     * @type {{}}\n     */\n    static LIGHTER = {fontWeight: 'lighter'};\n}\n\n/**\n * font-style 属性定义字体的风格\n */\nclass FontStyle {\n    static NAME = 'fontStyle';\n\n    /**\n     * 浏览器显示一个标准的字体样式\n     * @type {{}}\n     */\n    static NORMAL = {fontStyle : 'normal'};\n\n    /**\n     * 斜体\n     * @type {{}}\n     */\n    static ITALIC = {fontStyle : 'italic'};\n\n    /**\n     * 浏览器会显示一个倾斜的字体样式\n     * @type {{}}\n     */\n    static OBLIQUE = {fontStyle : 'oblique'};\n\n    /**\n     * 规定应该从父元素继承字体样式\n     * @type {{}}\n     */\n    static INHERIT = {fontStyle : 'inherit'};\n}\n\n/**\n * font-size 属性设置文本的大小\n */\nclass FontSize {\n    static NAME = 'fontSize';\n\n    static XX_SMALL = {fontSize : 'xx-small'};\n    static X_SMALL = {fontSize : 'x-small'};\n    static SMALL = {fontSize : 'small'};\n    static MEDIUM = {fontSize : 'medium'};\n    static LARGE = {fontSize : 'large'};\n    static X_LARGE = {fontSize : 'x-large'};\n    static XX_LARGE = {fontSize : 'xx-large'};\n\n    /**\n     * 把 font-size 设置为比父元素更小的尺寸\n     * @type {{}}\n     */\n    static SMALLER = {fontSize : 'smaller'};\n\n    /**\n     * 把 font-size 设置为比父元素更大的尺寸\n     * @type {{}}\n     */\n    static LARGER = {fontSize : 'larger'};\n\n    /**\n     * 把 font-size 设置为一个固定的值\n     * @type {{}}\n     */\n    static LENGTH = {fontSize : 'length'};\n\n    /**\n     * 规定应该从父元素继承字体尺寸\n     * @type {{}}\n     */\n    static INHERIT = {fontSize : 'inherit'};\n}\n\nclass FontFamily {\n    static NAME = 'fontFamily';\n\n    // Windows字体\n    /**\n     * 宋体\n     * @type {{fontFamily: string}}\n     */\n    static SimSun = {fontFamily:'SimSun'};\n    /**\n     * 黑体\n     * @type {{fontFamily: string}}\n     */\n    static SimHei = {fontFamily:'SimHei'};\n    /**\n     * 微软雅黑\n     * @type {{fontFamily: string}}\n     */\n    static MicrosoftYahei\t = {fontFamily:'Microsoft Yahei'};\n    /**\n     * 微软正黑体\n     * @type {{fontFamily: string}}\n     */\n    static MicrosoftJhengHei = {fontFamily:'Microsoft JhengHei'};\n    /**\n     * 楷体\n     * @type {{fontFamily: string}}\n     */\n    static KaiTi = {fontFamily:'KaiTi'};\n    /**\n     * 新宋体\n     * @type {{fontFamily: string}}\n     */\n    static NSimSun = {fontFamily:'NSimSun'};\n    /**\n     * 仿宋\n     * @type {{fontFamily: string}}\n     */\n    static FangSong = {fontFamily:'FangSong'};\n\n    // Mac 系统\n    /**\n     * 苹方\n     * @type {{fontFamily: string}}\n     */\n    static PingFangSC = {fontFamily:'PingFang SC'};\n    /**\n     * 华文黑体\n     * @type {{fontFamily: string}}\n     */\n    static STHeiti = {fontFamily:'STHeiti'};\n    /**\n     * 华文楷体\n     * @type {{fontFamily: string}}\n     */\n    static STKaiti = {fontFamily:'STKaiti'};\n    /**\n     * 华文宋体\n     * @type {{fontFamily: string}}\n     */\n    static STSong = {fontFamily:'STSong'};\n    /**\n     * 华文仿宋\n     * @type {{fontFamily: string}}\n     */\n    static STFangsong = {fontFamily:'STFangsong'};\n    /**\n     * 华文中宋\n     * @type {{fontFamily: string}}\n     */\n    static STZhongsong = {fontFamily:'STZhongsong'};\n    /**\n     * 华文琥珀\n     * @type {{fontFamily: string}}\n     */\n    static STHupo = {fontFamily:'STHupo'};\n    /**\n     * 华文新魏\n     * @type {{fontFamily: string}}\n     */\n    static STXinwei = {fontFamily:'STXinwei'};\n    /**\n     * 华文隶书\n     * @type {{fontFamily: string}}\n     */\n    static STLiti = {fontFamily:'STLiti'};\n    /**\n     * 华文行楷\n     * @type {{fontFamily: string}}\n     */\n    static STXingkai = {fontFamily:'STXingkai'};\n    /**\n     * 冬青黑体简\n     * @type {{fontFamily: string}}\n     */\n    static HiraginoSansGB\t = {fontFamily:'Hiragino Sans GB'};\n    /**\n     * 兰亭黑-简\n     * @type {{fontFamily: string}}\n     */\n    static LantingheiSC = {fontFamily:'Lantinghei SC'};\n    /**\n     * 翩翩体-简\n     * @type {{fontFamily: string}}\n     */\n    static HanzipenSC = {fontFamily:'Hanzipen SC'};\n    /**\n     * 手札体-简\n     * @type {{fontFamily: string}}\n     */\n    static HannotateSC = {fontFamily:'Hannotate SC'};\n    /**\n     * 宋体-简\n     * @type {{fontFamily: string}}\n     */\n    static SongtiSC = {fontFamily:'Songti SC'};\n    /**\n     * 娃娃体-简\n     * @type {{fontFamily: string}}\n     */\n    static WawatiSC = {fontFamily:'Wawati SC'};\n    /**\n     * 魏碑-简\n     * @type {{fontFamily: string}}\n     */\n    static WeibeiSC = {fontFamily:'Weibei SC'};\n    /**\n     * 行楷-简\n     * @type {{fontFamily: string}}\n     */\n    static XingkaiSC = {fontFamily:'Xingkai SC'};\n    /**\n     * 雅痞-简\n     * @type {{fontFamily: string}}\n     */\n    static YapiSC = {fontFamily:'Yapi SC'};\n    /**\n     * 圆体-简\n     * @type {{fontFamily: string}}\n     */\n    static YuantiSC = {fontFamily:'Yuanti SC'};\n}\n\nclass Color {\n    static NAME = 'color';\n\n    /**\n     * 规定应该从父元素继承颜色\n     * @type {{}}\n     */\n    static INHERIT = { color : \"INHERIT\" } ;\n    static AliceBlue = { color : \"AliceBlue\" } ;\n    static AntiqueWhite = { color : \"AntiqueWhite\" } ;\n    static Aqua = { color : \"Aqua\" } ;\n    static Aquamarine = { color : \"Aquamarine\" } ;\n    static Azure = { color : \"Azure\" } ;\n    static Beige = { color : \"Beige\" } ;\n    static Bisque = { color : \"Bisque\" } ;\n    static Black = { color : \"Black\" } ;\n    static BlanchedAlmond = { color : \"BlanchedAlmond\" } ;\n    static Blue = { color : \"Blue\" } ;\n    static BlueViolet = { color : \"BlueViolet\" } ;\n    static Brown = { color : \"Brown\" } ;\n    static BurlyWood = { color : \"BurlyWood\" } ;\n    static CadetBlue = { color : \"CadetBlue\" } ;\n    static Chartreuse = { color : \"Chartreuse\" } ;\n    static Chocolate = { color : \"Chocolate\" } ;\n    static Coral = { color : \"Coral\" } ;\n    static CornflowerBlue = { color : \"CornflowerBlue\" } ;\n    static Cornsilk = { color : \"Cornsilk\" } ;\n    static Crimson = { color : \"Crimson\" } ;\n    static Cyan = { color : \"Cyan\" } ;\n    static DarkBlue = { color : \"DarkBlue\" } ;\n    static DarkCyan = { color : \"DarkCyan\" } ;\n    static DarkGoldenRod = { color : \"DarkGoldenRod\" } ;\n    static DarkGray = { color : \"DarkGray\" } ;\n    static DarkGreen = { color : \"DarkGreen\" } ;\n    static DarkKhaki = { color : \"DarkKhaki\" } ;\n    static DarkMagenta = { color : \"DarkMagenta\" } ;\n    static DarkOliveGreen = { color : \"DarkOliveGreen\" } ;\n    static Darkorange = { color : \"Darkorange\" } ;\n    static DarkOrchid = { color : \"DarkOrchid\" } ;\n    static DarkRed = { color : \"DarkRed\" } ;\n    static DarkSalmon = { color : \"DarkSalmon\" } ;\n    static DarkSeaGreen = { color : \"DarkSeaGreen\" } ;\n    static DarkSlateBlue = { color : \"DarkSlateBlue\" } ;\n    static DarkSlateGray = { color : \"DarkSlateGray\" } ;\n    static DarkTurquoise = { color : \"DarkTurquoise\" } ;\n    static DarkViolet = { color : \"DarkViolet\" } ;\n    static DeepPink = { color : \"DeepPink\" } ;\n    static DeepSkyBlue = { color : \"DeepSkyBlue\" } ;\n    static DimGray = { color : \"DimGray\" } ;\n    static DodgerBlue = { color : \"DodgerBlue\" } ;\n    static Feldspar = { color : \"Feldspar\" } ;\n    static FireBrick = { color : \"FireBrick\" } ;\n    static FloralWhite = { color : \"FloralWhite\" } ;\n    static ForestGreen = { color : \"ForestGreen\" } ;\n    static Fuchsia = { color : \"Fuchsia\" } ;\n    static Gainsboro = { color : \"Gainsboro\" } ;\n    static GhostWhite = { color : \"GhostWhite\" } ;\n    static Gold = { color : \"Gold\" } ;\n    static GoldenRod = { color : \"GoldenRod\" } ;\n    static Gray = { color : \"Gray\" } ;\n    static Green = { color : \"Green\" } ;\n    static GreenYellow = { color : \"GreenYellow\" } ;\n    static HoneyDew = { color : \"HoneyDew\" } ;\n    static HotPink = { color : \"HotPink\" } ;\n    static IndianRed = { color : \"IndianRed\" } ;\n    static Indigo = { color : \"Indigo\" } ;\n    static Ivory = { color : \"Ivory\" } ;\n    static Khaki = { color : \"Khaki\" } ;\n    static Lavender = { color : \"Lavender\" } ;\n    static LavenderBlush = { color : \"LavenderBlush\" } ;\n    static LawnGreen = { color : \"LawnGreen\" } ;\n    static LemonChiffon = { color : \"LemonChiffon\" } ;\n    static LightBlue = { color : \"LightBlue\" } ;\n    static LightCoral = { color : \"LightCoral\" } ;\n    static LightCyan = { color : \"LightCyan\" } ;\n    static LightGoldenRodYellow = { color : \"LightGoldenRodYellow\" } ;\n    static LightGrey = { color : \"LightGrey\" } ;\n    static LightGreen = { color : \"LightGreen\" } ;\n    static LightPink = { color : \"LightPink\" } ;\n    static LightSalmon = { color : \"LightSalmon\" } ;\n    static LightSeaGreen = { color : \"LightSeaGreen\" } ;\n    static LightSkyBlue = { color : \"LightSkyBlue\" } ;\n    static LightSlateBlue = { color : \"LightSlateBlue\" } ;\n    static LightSlateGray = { color : \"LightSlateGray\" } ;\n    static LightSteelBlue = { color : \"LightSteelBlue\" } ;\n    static LightYellow = { color : \"LightYellow\" } ;\n    static Lime = { color : \"Lime\" } ;\n    static LimeGreen = { color : \"LimeGreen\" } ;\n    static Linen = { color : \"Linen\" } ;\n    static Magenta = { color : \"Magenta\" } ;\n    static Maroon = { color : \"Maroon\" } ;\n    static MediumAquaMarine = { color : \"MediumAquaMarine\" } ;\n    static MediumBlue = { color : \"MediumBlue\" } ;\n    static MediumOrchid = { color : \"MediumOrchid\" } ;\n    static MediumPurple = { color : \"MediumPurple\" } ;\n    static MediumSeaGreen = { color : \"MediumSeaGreen\" } ;\n    static MediumSlateBlue = { color : \"MediumSlateBlue\" } ;\n    static MediumSpringGreen = { color : \"MediumSpringGreen\" } ;\n    static MediumTurquoise = { color : \"MediumTurquoise\" } ;\n    static MediumVioletRed = { color : \"MediumVioletRed\" } ;\n    static MidnightBlue = { color : \"MidnightBlue\" } ;\n    static MintCream = { color : \"MintCream\" } ;\n    static MistyRose = { color : \"MistyRose\" } ;\n    static Moccasin = { color : \"Moccasin\" } ;\n    static NavajoWhite = { color : \"NavajoWhite\" } ;\n    static Navy = { color : \"Navy\" } ;\n    static OldLace = { color : \"OldLace\" } ;\n    static Olive = { color : \"Olive\" } ;\n    static OliveDrab = { color : \"OliveDrab\" } ;\n    static Orange = { color : \"Orange\" } ;\n    static OrangeRed = { color : \"OrangeRed\" } ;\n    static Orchid = { color : \"Orchid\" } ;\n    static PaleGoldenRod = { color : \"PaleGoldenRod\" } ;\n    static PaleGreen = { color : \"PaleGreen\" } ;\n    static PaleTurquoise = { color : \"PaleTurquoise\" } ;\n    static PaleVioletRed = { color : \"PaleVioletRed\" } ;\n    static PapayaWhip = { color : \"PapayaWhip\" } ;\n    static PeachPuff = { color : \"PeachPuff\" } ;\n    static Peru = { color : \"Peru\" } ;\n    static Pink = { color : \"Pink\" } ;\n    static Plum = { color : \"Plum\" } ;\n    static PowderBlue = { color : \"PowderBlue\" } ;\n    static Purple = { color : \"Purple\" } ;\n    static Red = { color : \"Red\" } ;\n    static RosyBrown = { color : \"RosyBrown\" } ;\n    static RoyalBlue = { color : \"RoyalBlue\" } ;\n    static SaddleBrown = { color : \"SaddleBrown\" } ;\n    static Salmon = { color : \"Salmon\" } ;\n    static SandyBrown = { color : \"SandyBrown\" } ;\n    static SeaGreen = { color : \"SeaGreen\" } ;\n    static SeaShell = { color : \"SeaShell\" } ;\n    static Sienna = { color : \"Sienna\" } ;\n    static Silver = { color : \"Silver\" } ;\n    static SkyBlue = { color : \"SkyBlue\" } ;\n    static SlateBlue = { color : \"SlateBlue\" } ;\n    static SlateGray = { color : \"SlateGray\" } ;\n    static Snow = { color : \"Snow\" } ;\n    static SpringGreen = { color : \"SpringGreen\" } ;\n    static SteelBlue = { color : \"SteelBlue\" } ;\n    static Tan = { color : \"Tan\" } ;\n    static Teal = { color : \"Teal\" } ;\n    static Thistle = { color : \"Thistle\" } ;\n    static Tomato = { color : \"Tomato\" } ;\n    static Turquoise = { color : \"Turquoise\" } ;\n    static Violet = { color : \"Violet\" } ;\n    static VioletRed = { color : \"VioletRed\" } ;\n    static Wheat = { color : \"Wheat\" } ;\n    static White = { color : \"White\" } ;\n    static WhiteSmoke = { color : \"WhiteSmoke\" } ;\n    static Yellow = { color : \"Yellow\" } ;\n    static YellowGreen = { color : \"YellowGreen\" } ;\n}\n\nclass BackgroundColor{\n    static NAME = 'backgroundColor';\n\n    static INHERIT = { backgroundColor : \"INHERIT\" } ;\n    static AliceBlue = { backgroundColor : \"AliceBlue\" } ;\n    static AntiqueWhite = { backgroundColor : \"AntiqueWhite\" } ;\n    static Aqua = { backgroundColor : \"Aqua\" } ;\n    static Aquamarine = { backgroundColor : \"Aquamarine\" } ;\n    static Azure = { backgroundColor : \"Azure\" } ;\n    static Beige = { backgroundColor : \"Beige\" } ;\n    static Bisque = { backgroundColor : \"Bisque\" } ;\n    static Black = { backgroundColor : \"Black\" } ;\n    static BlanchedAlmond = { backgroundColor : \"BlanchedAlmond\" } ;\n    static Blue = { backgroundColor : \"Blue\" } ;\n    static BlueViolet = { backgroundColor : \"BlueViolet\" } ;\n    static Brown = { backgroundColor : \"Brown\" } ;\n    static BurlyWood = { backgroundColor : \"BurlyWood\" } ;\n    static CadetBlue = { backgroundColor : \"CadetBlue\" } ;\n    static Chartreuse = { backgroundColor : \"Chartreuse\" } ;\n    static Chocolate = { backgroundColor : \"Chocolate\" } ;\n    static Coral = { backgroundColor : \"Coral\" } ;\n    static CornflowerBlue = { backgroundColor : \"CornflowerBlue\" } ;\n    static Cornsilk = { backgroundColor : \"Cornsilk\" } ;\n    static Crimson = { backgroundColor : \"Crimson\" } ;\n    static Cyan = { backgroundColor : \"Cyan\" } ;\n    static DarkBlue = { backgroundColor : \"DarkBlue\" } ;\n    static DarkCyan = { backgroundColor : \"DarkCyan\" } ;\n    static DarkGoldenRod = { backgroundColor : \"DarkGoldenRod\" } ;\n    static DarkGray = { backgroundColor : \"DarkGray\" } ;\n    static DarkGreen = { backgroundColor : \"DarkGreen\" } ;\n    static DarkKhaki = { backgroundColor : \"DarkKhaki\" } ;\n    static DarkMagenta = { backgroundColor : \"DarkMagenta\" } ;\n    static DarkOliveGreen = { backgroundColor : \"DarkOliveGreen\" } ;\n    static Darkorange = { backgroundColor : \"Darkorange\" } ;\n    static DarkOrchid = { backgroundColor : \"DarkOrchid\" } ;\n    static DarkRed = { backgroundColor : \"DarkRed\" } ;\n    static DarkSalmon = { backgroundColor : \"DarkSalmon\" } ;\n    static DarkSeaGreen = { backgroundColor : \"DarkSeaGreen\" } ;\n    static DarkSlateBlue = { backgroundColor : \"DarkSlateBlue\" } ;\n    static DarkSlateGray = { backgroundColor : \"DarkSlateGray\" } ;\n    static DarkTurquoise = { backgroundColor : \"DarkTurquoise\" } ;\n    static DarkViolet = { backgroundColor : \"DarkViolet\" } ;\n    static DeepPink = { backgroundColor : \"DeepPink\" } ;\n    static DeepSkyBlue = { backgroundColor : \"DeepSkyBlue\" } ;\n    static DimGray = { backgroundColor : \"DimGray\" } ;\n    static DodgerBlue = { backgroundColor : \"DodgerBlue\" } ;\n    static Feldspar = { backgroundColor : \"Feldspar\" } ;\n    static FireBrick = { backgroundColor : \"FireBrick\" } ;\n    static FloralWhite = { backgroundColor : \"FloralWhite\" } ;\n    static ForestGreen = { backgroundColor : \"ForestGreen\" } ;\n    static Fuchsia = { backgroundColor : \"Fuchsia\" } ;\n    static Gainsboro = { backgroundColor : \"Gainsboro\" } ;\n    static GhostWhite = { backgroundColor : \"GhostWhite\" } ;\n    static Gold = { backgroundColor : \"Gold\" } ;\n    static GoldenRod = { backgroundColor : \"GoldenRod\" } ;\n    static Gray = { backgroundColor : \"Gray\" } ;\n    static Green = { backgroundColor : \"Green\" } ;\n    static GreenYellow = { backgroundColor : \"GreenYellow\" } ;\n    static HoneyDew = { backgroundColor : \"HoneyDew\" } ;\n    static HotPink = { backgroundColor : \"HotPink\" } ;\n    static IndianRed = { backgroundColor : \"IndianRed\" } ;\n    static Indigo = { backgroundColor : \"Indigo\" } ;\n    static Ivory = { backgroundColor : \"Ivory\" } ;\n    static Khaki = { backgroundColor : \"Khaki\" } ;\n    static Lavender = { backgroundColor : \"Lavender\" } ;\n    static LavenderBlush = { backgroundColor : \"LavenderBlush\" } ;\n    static LawnGreen = { backgroundColor : \"LawnGreen\" } ;\n    static LemonChiffon = { backgroundColor : \"LemonChiffon\" } ;\n    static LightBlue = { backgroundColor : \"LightBlue\" } ;\n    static LightCoral = { backgroundColor : \"LightCoral\" } ;\n    static LightCyan = { backgroundColor : \"LightCyan\" } ;\n    static LightGoldenRodYellow = { backgroundColor : \"LightGoldenRodYellow\" } ;\n    static LightGrey = { backgroundColor : \"LightGrey\" } ;\n    static LightGreen = { backgroundColor : \"LightGreen\" } ;\n    static LightPink = { backgroundColor : \"LightPink\" } ;\n    static LightSalmon = { backgroundColor : \"LightSalmon\" } ;\n    static LightSeaGreen = { backgroundColor : \"LightSeaGreen\" } ;\n    static LightSkyBlue = { backgroundColor : \"LightSkyBlue\" } ;\n    static LightSlateBlue = { backgroundColor : \"LightSlateBlue\" } ;\n    static LightSlateGray = { backgroundColor : \"LightSlateGray\" } ;\n    static LightSteelBlue = { backgroundColor : \"LightSteelBlue\" } ;\n    static LightYellow = { backgroundColor : \"LightYellow\" } ;\n    static Lime = { backgroundColor : \"Lime\" } ;\n    static LimeGreen = { backgroundColor : \"LimeGreen\" } ;\n    static Linen = { backgroundColor : \"Linen\" } ;\n    static Magenta = { backgroundColor : \"Magenta\" } ;\n    static Maroon = { backgroundColor : \"Maroon\" } ;\n    static MediumAquaMarine = { backgroundColor : \"MediumAquaMarine\" } ;\n    static MediumBlue = { backgroundColor : \"MediumBlue\" } ;\n    static MediumOrchid = { backgroundColor : \"MediumOrchid\" } ;\n    static MediumPurple = { backgroundColor : \"MediumPurple\" } ;\n    static MediumSeaGreen = { backgroundColor : \"MediumSeaGreen\" } ;\n    static MediumSlateBlue = { backgroundColor : \"MediumSlateBlue\" } ;\n    static MediumSpringGreen = { backgroundColor : \"MediumSpringGreen\" } ;\n    static MediumTurquoise = { backgroundColor : \"MediumTurquoise\" } ;\n    static MediumVioletRed = { backgroundColor : \"MediumVioletRed\" } ;\n    static MidnightBlue = { backgroundColor : \"MidnightBlue\" } ;\n    static MintCream = { backgroundColor : \"MintCream\" } ;\n    static MistyRose = { backgroundColor : \"MistyRose\" } ;\n    static Moccasin = { backgroundColor : \"Moccasin\" } ;\n    static NavajoWhite = { backgroundColor : \"NavajoWhite\" } ;\n    static Navy = { backgroundColor : \"Navy\" } ;\n    static OldLace = { backgroundColor : \"OldLace\" } ;\n    static Olive = { backgroundColor : \"Olive\" } ;\n    static OliveDrab = { backgroundColor : \"OliveDrab\" } ;\n    static Orange = { backgroundColor : \"Orange\" } ;\n    static OrangeRed = { backgroundColor : \"OrangeRed\" } ;\n    static Orchid = { backgroundColor : \"Orchid\" } ;\n    static PaleGoldenRod = { backgroundColor : \"PaleGoldenRod\" } ;\n    static PaleGreen = { backgroundColor : \"PaleGreen\" } ;\n    static PaleTurquoise = { backgroundColor : \"PaleTurquoise\" } ;\n    static PaleVioletRed = { backgroundColor : \"PaleVioletRed\" } ;\n    static PapayaWhip = { backgroundColor : \"PapayaWhip\" } ;\n    static PeachPuff = { backgroundColor : \"PeachPuff\" } ;\n    static Peru = { backgroundColor : \"Peru\" } ;\n    static Pink = { backgroundColor : \"Pink\" } ;\n    static Plum = { backgroundColor : \"Plum\" } ;\n    static PowderBlue = { backgroundColor : \"PowderBlue\" } ;\n    static Purple = { backgroundColor : \"Purple\" } ;\n    static Red = { backgroundColor : \"Red\" } ;\n    static RosyBrown = { backgroundColor : \"RosyBrown\" } ;\n    static RoyalBlue = { backgroundColor : \"RoyalBlue\" } ;\n    static SaddleBrown = { backgroundColor : \"SaddleBrown\" } ;\n    static Salmon = { backgroundColor : \"Salmon\" } ;\n    static SandyBrown = { backgroundColor : \"SandyBrown\" } ;\n    static SeaGreen = { backgroundColor : \"SeaGreen\" } ;\n    static SeaShell = { backgroundColor : \"SeaShell\" } ;\n    static Sienna = { backgroundColor : \"Sienna\" } ;\n    static Silver = { backgroundColor : \"Silver\" } ;\n    static SkyBlue = { backgroundColor : \"SkyBlue\" } ;\n    static SlateBlue = { backgroundColor : \"SlateBlue\" } ;\n    static SlateGray = { backgroundColor : \"SlateGray\" } ;\n    static Snow = { backgroundColor : \"Snow\" } ;\n    static SpringGreen = { backgroundColor : \"SpringGreen\" } ;\n    static SteelBlue = { backgroundColor : \"SteelBlue\" } ;\n    static Tan = { backgroundColor : \"Tan\" } ;\n    static Teal = { backgroundColor : \"Teal\" } ;\n    static Thistle = { backgroundColor : \"Thistle\" } ;\n    static Tomato = { backgroundColor : \"Tomato\" } ;\n    static Turquoise = { backgroundColor : \"Turquoise\" } ;\n    static Violet = { backgroundColor : \"Violet\" } ;\n    static VioletRed = { backgroundColor : \"VioletRed\" } ;\n    static Wheat = { backgroundColor : \"Wheat\" } ;\n    static White = { backgroundColor : \"White\" } ;\n    static WhiteSmoke = { backgroundColor : \"WhiteSmoke\" } ;\n    static Yellow = { backgroundColor : \"Yellow\" } ;\n    static YellowGreen = { backgroundColor : \"YellowGreen\" } ;\n}\n\n\nexport {LineHeight, TextAlign, TextDecoration, FontFamily, Color, BackgroundColor, FontSize, FontStyle, FontWeight};","import TextField from \"./component/TextField\";\nimport Block from \"./model/Block\";\nimport BlockType from \"./model/BlockType\";\nimport Content from \"./model/Content\";\nimport SelectionRange from \"./model/SelectionRange\";\nimport TextFieldState from \"./model/TextFieldState\";\nimport SelectionUtil from \"./util/SelectionUtil\";\nimport * as StyleUtil from \"./util/StyleUtil\";\n\nexport {\n    TextField,\n    Block,\n    BlockType,\n    Content,\n    SelectionRange,\n    TextFieldState,\n    SelectionUtil,\n    StyleUtil\n}"],"sourceRoot":""}